[{"/Users/lli/mtb/src/index.tsx":"1","/Users/lli/mtb/src/mocks/browser.js":"2","/Users/lli/mtb/src/App.tsx":"3","/Users/lli/mtb/src/helpers/AuthContext.tsx":"4","/Users/lli/mtb/src/mocks/handlers.ts":"5","/Users/lli/mtb/src/helpers/utility.ts":"6","/Users/lli/mtb/src/services/user.service.ts":"7","/Users/lli/mtb/src/style/theme.ts":"8","/Users/lli/mtb/src/AuthenticatedApp.tsx":"9","/Users/lli/mtb/src/UnauthenticatedApp.tsx":"10","/Users/lli/mtb/src/components/widgets/ErrorHandler.tsx":"11","/Users/lli/mtb/src/services/lshelper.ts":"12","/Users/lli/mtb/src/types/constants.ts":"13","/Users/lli/mtb/src/routes_private.ts":"14","/Users/lli/mtb/src/routes_public.ts":"15","/Users/lli/mtb/src/components/widgets/AppTopNav.tsx":"16","/Users/lli/mtb/src/components/studies/StudyList.tsx":"17","/Users/lli/mtb/src/components/account/AccountCreate.tsx":"18","/Users/lli/mtb/src/components/static/DevelopmentTeam.tsx":"19","/Users/lli/mtb/src/components/account/AccountLogin.tsx":"20","/Users/lli/mtb/src/components/account/Logout.tsx":"21","/Users/lli/mtb/src/services/study.service.ts":"22","/Users/lli/mtb/src/services/store_service.ts":"23","/Users/lli/mtb/src/components/studies/StudyCard.tsx":"24","/Users/lli/mtb/src/components/widgets/ConfirmationDialog.tsx":"25","/Users/lli/mtb/src/components/widgets/Headings.tsx":"26","/Users/lli/mtb/src/components/account/PasswordReset.tsx":"27","/Users/lli/mtb/src/components/widgets/Loader.tsx":"28","/Users/lli/mtb/src/components/static/Plans.tsx":"29","/Users/lli/mtb/src/components/static/HowItWorks.tsx":"30","/Users/lli/mtb/src/components/layouts/sessions.tsx":"31","/Users/lli/mtb/src/components/studies/StudyBuilder.tsx":"32","/Users/lli/mtb/src/components/account/AccountSetup.tsx":"33","/Users/lli/mtb/src/components/assessments/AssessmentDetail.tsx":"34","/Users/lli/mtb/src/components/assessments/AssessmentLibrary.tsx":"35","/Users/lli/mtb/src/components/studies/participants/ParticipantManager.tsx":"36","/Users/lli/mtb/src/helpers/hooks.ts":"37","/Users/lli/mtb/src/services/access.service.ts":"38","/Users/lli/mtb/src/helpers/AsyncHook.ts":"39","/Users/lli/mtb/src/components/studies/StudyTopNav.tsx":"40","/Users/lli/mtb/src/services/participants.service.ts":"41","/Users/lli/mtb/src/components/studies/StudyLeftNav.tsx":"42","/Users/lli/mtb/src/components/studies/NavButtons.tsx":"43","/Users/lli/mtb/src/components/studies/session-creator/SessionCreator.tsx":"44","/Users/lli/mtb/src/components/studies/app-design/AppDesign.tsx":"45","/Users/lli/mtb/src/components/studies/launch/Launch.tsx":"46","/Users/lli/mtb/src/components/studies/passive-features/PassiveFeatures.tsx":"47","/Users/lli/mtb/src/components/studies/scheduler/Scheduler.tsx":"48","/Users/lli/mtb/src/components/studies/participants/ParticipantTable.tsx":"49","/Users/lli/mtb/src/components/widgets/ObjectDebug.tsx":"50","/Users/lli/mtb/src/components/widgets/HideWhen.tsx":"51","/Users/lli/mtb/src/services/assessment.service.ts":"52","/Users/lli/mtb/src/components/assessments/AssessmentLibraryWrapper.tsx":"53","/Users/lli/mtb/src/components/assessments/AssessmentCard.tsx":"54","/Users/lli/mtb/src/components/assessments/AssessmentImage.tsx":"55","/Users/lli/mtb/src/components/widgets/BreadCrumb.tsx":"56","/Users/lli/mtb/src/components/studies/sections.ts":"57","/Users/lli/mtb/src/components/studies/session-creator/sessionActions.ts":"58","/Users/lli/mtb/src/components/studies/scheduler/scheduleActions.ts":"59","/Users/lli/mtb/src/types/scheduling.ts":"60","/Users/lli/mtb/src/components/studies/session-creator/SingleSessionContainer.tsx":"61","/Users/lli/mtb/src/components/studies/session-creator/AssessmentSelector.tsx":"62","/Users/lli/mtb/src/components/studies/session-creator/SessionActionButtons.tsx":"63","/Users/lli/mtb/src/components/studies/scheduler/IntroInfo.tsx":"64","/Users/lli/mtb/src/components/studies/scheduler/StudyStartDate.tsx":"65","/Users/lli/mtb/src/components/studies/scheduler/Duration.tsx":"66","/Users/lli/mtb/src/components/studies/scheduler/TimelinePlot.tsx":"67","/Users/lli/mtb/src/components/studies/launch/LaunchStepper.tsx":"68","/Users/lli/mtb/src/components/studies/scheduler/SchedulableSingleSessionContainer.tsx":"69","/Users/lli/mtb/src/components/assessments/AssessmentLibraryFilter.tsx":"70","/Users/lli/mtb/src/components/widgets/SessionIcon.tsx":"71","/Users/lli/mtb/src/components/assessments/AssessmentSmall.tsx":"72","/Users/lli/mtb/src/components/widgets/EditableTextbox.tsx":"73","/Users/lli/mtb/src/components/studies/scheduler/SchedulingFormSection.tsx":"74","/Users/lli/mtb/src/components/widgets/SelectWithEnum.tsx":"75","/Users/lli/mtb/src/components/widgets/SmallTextBox.tsx":"76","/Users/lli/mtb/src/components/studies/scheduler/AssessmentWindow.tsx":"77","/Users/lli/mtb/src/components/studies/scheduler/AssessmentList.tsx":"78","/Users/lli/mtb/src/components/studies/scheduler/EndDate.tsx":"79","/Users/lli/mtb/src/components/studies/scheduler/ReminderNotification.tsx":"80","/Users/lli/mtb/src/components/studies/scheduler/RepeatFrequency.tsx":"81","/Users/lli/mtb/src/components/studies/scheduler/StartDate.tsx":"82","/Users/lli/mtb/src/components/access-settings/AccessSettings.tsx":"83","/Users/lli/mtb/src/components/access-settings/AccessGrid.tsx":"84","/Users/lli/mtb/src/components/studies/LiveIcon.tsx":"85","/Users/lli/mtb/src/components/access-settings/AccountListing.tsx":"86","/Users/lli/mtb/src/components/access-settings/MemberInvite.tsx":"87","/Users/lli/mtb/src/components/widgets/SideBarListItem.tsx":"88","/Users/lli/mtb/src/components/widgets/ErrorDisplay.tsx":"89","/Users/lli/mtb/src/components/widgets/TabPanel.tsx":"90","/Users/lli/mtb/src/components/widgets/CollapsibleLayout.tsx":"91"},{"size":1364,"mtime":1612910537260,"results":"92","hashOfConfig":"93"},{"size":187,"mtime":1611683937651,"results":"94","hashOfConfig":"93"},{"size":3763,"mtime":1612910537246,"results":"95","hashOfConfig":"93"},{"size":3227,"mtime":1612910537259,"results":"96","hashOfConfig":"93"},{"size":7546,"mtime":1612384874716,"results":"97","hashOfConfig":"93"},{"size":5671,"mtime":1612910537260,"results":"98","hashOfConfig":"93"},{"size":1942,"mtime":1611683937653,"results":"99","hashOfConfig":"93"},{"size":2998,"mtime":1612842853684,"results":"100","hashOfConfig":"93"},{"size":962,"mtime":1611683937633,"results":"101","hashOfConfig":"93"},{"size":635,"mtime":1611683937633,"results":"102","hashOfConfig":"93"},{"size":444,"mtime":1611683937647,"results":"103","hashOfConfig":"93"},{"size":1060,"mtime":1611683937652,"results":"104","hashOfConfig":"93"},{"size":4791,"mtime":1612910537263,"results":"105","hashOfConfig":"93"},{"size":1541,"mtime":1612384874716,"results":"106","hashOfConfig":"93"},{"size":1245,"mtime":1611683937651,"results":"107","hashOfConfig":"93"},{"size":7760,"mtime":1611947138992,"results":"108","hashOfConfig":"93"},{"size":10290,"mtime":1612910537249,"results":"109","hashOfConfig":"93"},{"size":467,"mtime":1611683937636,"results":"110","hashOfConfig":"93"},{"size":481,"mtime":1611683937640,"results":"111","hashOfConfig":"93"},{"size":8137,"mtime":1612910537247,"results":"112","hashOfConfig":"93"},{"size":761,"mtime":1612910537247,"results":"113","hashOfConfig":"93"},{"size":3613,"mtime":1612384874717,"results":"114","hashOfConfig":"93"},{"size":1271,"mtime":1611683937653,"results":"115","hashOfConfig":"93"},{"size":6903,"mtime":1612910088816,"results":"116","hashOfConfig":"93"},{"size":4117,"mtime":1612297460139,"results":"117","hashOfConfig":"93"},{"size":1468,"mtime":1611683937647,"results":"118","hashOfConfig":"93"},{"size":2206,"mtime":1611683937637,"results":"119","hashOfConfig":"93"},{"size":1156,"mtime":1611683937647,"results":"120","hashOfConfig":"93"},{"size":411,"mtime":1611683937640,"results":"121","hashOfConfig":"93"},{"size":446,"mtime":1611683937640,"results":"122","hashOfConfig":"93"},{"size":5600,"mtime":1611683937639,"results":"123","hashOfConfig":"93"},{"size":8627,"mtime":1612910537248,"results":"124","hashOfConfig":"93"},{"size":460,"mtime":1611683937637,"results":"125","hashOfConfig":"93"},{"size":3305,"mtime":1612910537248,"results":"126","hashOfConfig":"93"},{"size":2406,"mtime":1612910537248,"results":"127","hashOfConfig":"93"},{"size":11620,"mtime":1612910537251,"results":"128","hashOfConfig":"93"},{"size":893,"mtime":1612910537259,"results":"129","hashOfConfig":"93"},{"size":3248,"mtime":1612384874717,"results":"130","hashOfConfig":"93"},{"size":2308,"mtime":1611683937649,"results":"131","hashOfConfig":"93"},{"size":4311,"mtime":1612910537249,"results":"132","hashOfConfig":"93"},{"size":740,"mtime":1612910537261,"results":"133","hashOfConfig":"93"},{"size":4143,"mtime":1612384874711,"results":"134","hashOfConfig":"93"},{"size":1313,"mtime":1611947138988,"results":"135","hashOfConfig":"93"},{"size":9107,"mtime":1612911063898,"results":"136","hashOfConfig":"93"},{"size":5352,"mtime":1612910537250,"results":"137","hashOfConfig":"93"},{"size":3144,"mtime":1612910537250,"results":"138","hashOfConfig":"93"},{"size":847,"mtime":1612910537251,"results":"139","hashOfConfig":"93"},{"size":7936,"mtime":1612910537256,"results":"140","hashOfConfig":"93"},{"size":11407,"mtime":1611683937642,"results":"141","hashOfConfig":"93"},{"size":987,"mtime":1611683937647,"results":"142","hashOfConfig":"93"},{"size":880,"mtime":1611683937647,"results":"143","hashOfConfig":"93"},{"size":3493,"mtime":1612910088825,"results":"144","hashOfConfig":"93"},{"size":1975,"mtime":1611683937638,"results":"145","hashOfConfig":"93"},{"size":2177,"mtime":1611683937637,"results":"146","hashOfConfig":"93"},{"size":1707,"mtime":1611683937638,"results":"147","hashOfConfig":"93"},{"size":1030,"mtime":1611683937646,"results":"148","hashOfConfig":"93"},{"size":789,"mtime":1611683937645,"results":"149","hashOfConfig":"93"},{"size":3895,"mtime":1612910537257,"results":"150","hashOfConfig":"93"},{"size":1311,"mtime":1611683937645,"results":"151","hashOfConfig":"93"},{"size":2448,"mtime":1612910537264,"results":"152","hashOfConfig":"93"},{"size":8533,"mtime":1612384874712,"results":"153","hashOfConfig":"93"},{"size":5065,"mtime":1612910537285,"results":"154","hashOfConfig":"93"},{"size":3711,"mtime":1612910537257,"results":"155","hashOfConfig":"93"},{"size":1862,"mtime":1611683937644,"results":"156","hashOfConfig":"93"},{"size":1800,"mtime":1611683937645,"results":"157","hashOfConfig":"93"},{"size":3594,"mtime":1611683937643,"results":"158","hashOfConfig":"93"},{"size":628,"mtime":1611683937645,"results":"159","hashOfConfig":"93"},{"size":3641,"mtime":1611683937642,"results":"160","hashOfConfig":"93"},{"size":8233,"mtime":1612910537255,"results":"161","hashOfConfig":"93"},{"size":2667,"mtime":1611683937638,"results":"162","hashOfConfig":"93"},{"size":1779,"mtime":1611683937648,"results":"163","hashOfConfig":"93"},{"size":2572,"mtime":1611683937639,"results":"164","hashOfConfig":"93"},{"size":2996,"mtime":1611683937647,"results":"165","hashOfConfig":"93"},{"size":2272,"mtime":1611683937644,"results":"166","hashOfConfig":"93"},{"size":2129,"mtime":1611683937647,"results":"167","hashOfConfig":"93"},{"size":1211,"mtime":1611683937648,"results":"168","hashOfConfig":"93"},{"size":3953,"mtime":1611683937643,"results":"169","hashOfConfig":"93"},{"size":4532,"mtime":1611683937643,"results":"170","hashOfConfig":"93"},{"size":2094,"mtime":1612910537254,"results":"171","hashOfConfig":"93"},{"size":2251,"mtime":1611683937644,"results":"172","hashOfConfig":"93"},{"size":1205,"mtime":1611683937644,"results":"173","hashOfConfig":"93"},{"size":2259,"mtime":1611683937645,"results":"174","hashOfConfig":"93"},{"size":9846,"mtime":1612910537246,"results":"175","hashOfConfig":"93"},{"size":4409,"mtime":1612384874704,"results":"176","hashOfConfig":"93"},{"size":818,"mtime":1612910088814,"results":"177","hashOfConfig":"93"},{"size":8432,"mtime":1612910537247,"results":"178","hashOfConfig":"93"},{"size":2168,"mtime":1612384874708,"results":"179","hashOfConfig":"93"},{"size":2182,"mtime":1612384874713,"results":"180","hashOfConfig":"93"},{"size":826,"mtime":1611947138992,"results":"181","hashOfConfig":"93"},{"size":1200,"mtime":1611683937648,"results":"182","hashOfConfig":"93"},{"size":4287,"mtime":1612910537258,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9i399",{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"192"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"192"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"192"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"192"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"192"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"192"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"192"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"192"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"192"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"192"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"192"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"192"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"192"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"192"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"192"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"192"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"192"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"192"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"192"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"192"},{"filePath":"295","messages":"296","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"297","messages":"298","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"192"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"192"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"192"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"192"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"192"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"192"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"192"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"192"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"192"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"192"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"192"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"192"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"192"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"192"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"192"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"192"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"192"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"192"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"192"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"192"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"192"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"192"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"192"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"192"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"192"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"192"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lli/mtb/src/index.tsx",[],"/Users/lli/mtb/src/mocks/browser.js",[],["417","418"],"/Users/lli/mtb/src/App.tsx",["419","420"],"import {\n  Container,\n  CssBaseline,\n  ThemeProvider,\n  Typography\n} from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport { ErrorBoundary } from 'react-error-boundary'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './App.css'\nimport AuthenticatedApp from './AuthenticatedApp'\nimport { ErrorFallback, ErrorHandler } from './components/widgets/ErrorHandler'\nimport {\n  useUserSessionDataDispatch,\n  useUserSessionDataState\n} from './helpers/AuthContext'\nimport UserService from './services/user.service'\nimport { cssVariables, theme } from './style/theme'\nimport { UserSessionData } from './types/types'\nimport UnauthenticatedApp from './UnauthenticatedApp'\n\n//const defaultTheme = createMuiTheme()\n\n/*function getRootURL() {\n  const portString = window.location.port ? `:${window.location.port}` : ''\n  return `${window.location.protocol}//${window.location.hostname}${portString}/`\n}*/\n\nexport const detectSSOCode = async (\n  sessionUpdateFn: Function,\n  sessionData: UserSessionData,\n) => {\n  //const redirectURL = getRootURL()\n  // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n  let code: URL | null | string = new URL(window.location.href)\n  // in test environment the searchParams isn't defined\n  const { searchParams } = code\n  if (!searchParams) {\n    return\n  }\n  code = searchParams.get('code')\n  if (code && !sessionData.token) {\n    try {\n      console.log('trying to log in')\n      const env = UserService.getOathEnvironment()\n      const loggedIn = await UserService.loginOauth(\n        code,\n        env.redirect,\n        env.vendor,\n      )\n\n      sessionUpdateFn({\n        type: 'LOGIN',\n        payload: {\n          ...sessionData,\n          token: loggedIn.data.sessionToken,\n          name: loggedIn.data.firstName,\n          orgMembership: loggedIn.data.orgMembership,\n          dataGroups: loggedIn.data.dataGroups,\n          roles: loggedIn.data.roles,\n          id: loggedIn.data.id\n        },\n      })\n\n      window.location.replace(`${window.location.origin}/studies`)\n      // window.location.replace(env.redirect+'/study-editor')\n    } catch (e) {\n      alert(e.message)\n    }\n  }\n}\n\nfunction App() {\n  const sessionData = useUserSessionDataState()\n  const sessionUpdateFn = useUserSessionDataDispatch()\n  const token = sessionData.token\n  useEffect(() => {\n    let isSubscribed = true\n    //the whole point of this is to log out the user if their session ha expired on the servier\n    async function getInfo(token: string | undefined) {\n      if (token && isSubscribed) {\n        try {\n          await UserService.getUserInfo(token)\n        } catch (e) {\n          if (e.statusCode && e.statusCode >= 400) {\n            sessionUpdateFn({\n              type: 'LOGOUT',\n            })\n            alert('Authentication Error')\n          }\n        }\n      }\n    }\n    getInfo(token)\n    return () => {\n      isSubscribed = false\n    }\n  }, [token])\n  useEffect(() => {\n    detectSSOCode(sessionUpdateFn, sessionData)\n  }, [sessionData.token])\n\n  return (\n    <ThemeProvider theme={{ ...theme, ...cssVariables }}>\n      <Typography component={'div'}>\n        <CssBaseline />\n        <Container maxWidth=\"xl\" style={{ height: '100vh', padding: '0' }}>\n          <Router basename={process.env.PUBLIC_URL}>\n            <ErrorBoundary\n              FallbackComponent={ErrorFallback}\n              onError={ErrorHandler}\n            >\n              {sessionData.token ? (\n                <AuthenticatedApp token={sessionData.token} />\n              ) : (\n                <UnauthenticatedApp />\n              )}\n            </ErrorBoundary>\n          </Router>\n        </Container>\n      </Typography>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n",["421","422"],"/Users/lli/mtb/src/helpers/AuthContext.tsx",[],"/Users/lli/mtb/src/mocks/handlers.ts",[],"/Users/lli/mtb/src/helpers/utility.ts",[],"/Users/lli/mtb/src/services/user.service.ts",["423"],"import { callEndpoint } from '../helpers/utility'\nimport constants from '../types/constants'\nimport { LoggedInUserData, Response } from '../types/types'\n\nconst getOathEnvironment = (): {\n  client: string\n  vendor: string\n  redirect: string\n} => {\n  if (document.location.origin.indexOf('127.0.0.1') > -1) {\n    return constants.oauth.local\n  } else if (document.location.origin.indexOf('staging') > -1) {\n    return constants.oauth.staging\n  }\n  throw 'unknown'\n}\n\nconst requestResetPassword = async (email: string): Promise<Response<{}>> => {\n  const postData = {\n    email,\n    appId: constants.constants.APP_ID,\n  }\n  return await callEndpoint<any>(\n    constants.endpoints.requestResetPassword,\n    'POST',\n    postData,\n  )\n}\n\nconst loginWithPassword = async (\n  email: string,\n  password: string,\n): Promise<Response<LoggedInUserData>> => {\n  const postData = {\n    appId: 'sage-assessment-test', //constants.constants.APP_ID,\n    email,\n    password,\n  }\n  return await callEndpoint<LoggedInUserData>(\n    constants.endpoints.signIn,\n    'POST',\n    postData,\n  )\n}\n\nconst loginOauth = async (\n  authToken: string,\n  callbackUrl: string,\n  vendorId: string,\n): Promise<Response<LoggedInUserData>> => {\n  const postData = {\n    appId: constants.constants.APP_ID,\n    vendorId,\n    authToken,\n    callbackUrl,\n  }\n  console.log('token:', authToken)\n  /*DO NOt CHECK IN*/\n  //return loginWithPassword('username', 'password')\n\n  const result = await callEndpoint<LoggedInUserData>(\n    constants.endpoints.oauthSignIn,\n    'POST',\n    postData,\n  )\n\n  return result\n}\n\nasync function getUserInfo(token: string): Promise<Response<LoggedInUserData>> {\n  const result = await callEndpoint<LoggedInUserData>(\n    constants.endpoints.selfInfo,\n    'GET',\n    {},\n    token,\n  )\n  return result\n}\nconst UserService = {\n  getOathEnvironment,\n  requestResetPassword,\n  loginWithPassword,\n  loginOauth,\n  getUserInfo,\n}\n\nexport default UserService\n","/Users/lli/mtb/src/style/theme.ts",[],"/Users/lli/mtb/src/AuthenticatedApp.tsx",[],"/Users/lli/mtb/src/UnauthenticatedApp.tsx",[],"/Users/lli/mtb/src/components/widgets/ErrorHandler.tsx",[],"/Users/lli/mtb/src/services/lshelper.ts",[],"/Users/lli/mtb/src/types/constants.ts",["424"],"export default {\n  constants: {\n    APP_ID: 'mtb-user-testing',\n    STUDY_ID: 'mtb-user-testing',\n    SESSION_NAME: 'bridge-session-mtb-user-testing',\n    ENDPOINT: 'https://webservices.sagebridge.org',\n    SYNAPSE_ENDPOINT: 'https://repo-prod.prod.sagebase.org',\n  },\n\n  /* templateTitles: {\n    email_account_exists: 'Account already exists notification (email)',\n    email_app_install_link: 'Link to install app (email)',\n    email_reset_password: 'Reset password (email)',\n    email_sign_in: 'Sign in (via email)',\n    email_signed_consent: 'Consent agreement (email)',\n    email_verify_email: 'Verify email address',\n    sms_account_exists: 'Account already exists notification (SMS)',\n    sms_app_install_link: 'Link to install app (SMS)',\n    sms_phone_sign_in: 'Sign in (via SMS)',\n    sms_reset_password: 'Reset password (SMS)',\n    sms_signed_consent: 'Consent agreement (SMS)',\n    sms_verify_phone: 'Verify phone number',\n  },*/\n  environments: [\n    { value: 'local', label: 'Local' },\n    { value: 'develop', label: 'Development' },\n    { value: 'staging', label: 'Staging' },\n    { value: 'production', label: 'Production' },\n  ],\n  /*host: {\n    local: 'http://localhost:9000',\n    develop: 'https://ws-develop.sagebridge.org',\n    staging: 'https://ws-staging.sagebridge.org',\n    production: 'https://ws.sagebridge.org',\n  },*/\n\n  oauth: {\n    local: {\n      client: '100062',\n      vendor: 'mtb',\n      redirect: 'http://127.0.0.1:3000',\n    },\n    staging: {\n      client: '100069',\n      vendor: 'mtb-staging',\n      redirect: 'https://staging.mobiletoolbox.org',\n    },\n  },\n  /* client: {\n    local: '100062',\n    staging: '100069',\n    production: '100018',\n  },\n  vendor: {\n    local: 'mtb',\n    staging: 'mtb-staging',\n    production: '',\n  }*/\n\n  /*toastr: {\n    closeButton: true,\n    debug: false,\n    newestOnTop: true,\n    progressBar: true,\n    positionClass: \"toast-bottom-center\",\n    preventDuplicates: true,\n    showDuration: \"300\",\n    hideDuration: 300,\n    timeOut: 7000,\n    extendedTimeOut: \"1000\",\n    showEasing: \"swing\",\n    hideEasing: \"linear\",\n    showMethod: \"fadeIn\",\n    hideMethod: \"fadeOut\",\n    opacity: 1.0\n  },\n  msgs: {\n    shared_modules: {\n      PUBLISH: \"Are you sure you want to publish this shared module version?\"\n    }\n  },\n  retentionReports: ['api', 'biomarin-pku-study', 'crf-module', 'sage-mpower-2'],*/\n  endpoints: {\n    /*adminAuth: '/v3/auth/admin',\n  appConfigs: '/v3/appconfigs',\n  appConfigElements: '/v3/appconfigs/elements',\n  apps: '/v1/apps',\n  cache: '/v3/cache',\n  compoundactivitydefinitions: '/v3/compoundactivitydefinitions',\n  emailStatus: '/v1/apps/self/emailStatus',\n  export: '/v3/export',\n  externalIds: '/v4/externalids',\n  files: '/v3/files',\n  getCurrentApp: '/v1/apps/self',\n  getApp: '/v1/apps/',\n  getAppList: '/v1/apps?format=summary',\n  getAppPublicKey: '/v1/apps/self/publicKey',\n  masterschedule: '/v3/schedulerconfigs',\n  metadata: '/v3/sharedmodules/metadata',*/\n    sessionAssessments: '/v1/sessions/{sessionGuid}/assessments',\n    assessments: '/v1/assessments?includeDeleted=false',\n    assessmentsShared: '/v1/sharedassessments/?includeDeleted=false',\n    assessmentShared: '/v1/sharedassessments/',\n    assessment: '/v1/assessments/',\n    assessmentsSharedResources:\n      '/v1/sharedassessments/identifier:{identifier}/resources',\n    assessmentResources: '/v1/assessments/identifier:{identifier}/resources', //'/v1/sharedassessments',\n    oauthSignIn: '/v3/auth/oauth/signIn',\n    selfInfo: '/v3/participants/self',\n    enrollments: '/v5/studies/{studyId}/enrollments',\n    participants: '/v3/participants/search',\n    accountCreate: '/v1/accounts',\n    getAccountsForOrg: '/v1/organizations/{orgId}/members',\n\n    //new made up\n    studies: '/v1/studies',\n    study: '/v1/studies/:id',\n\n    schedule: 'v1/schedule/:id',\n    scheduleSessions: 'v1/schedule/:id/sessions',\n\n    /*phoneSignIn: '/v3/auth/phone/signIn',\n  reauth: '/v3/auth/reauth',\n  reports: '/v3/reports',\n  requestPhoneSignIn: '/v3/auth/phone',*/\n    requestResetPassword: '/v3/auth/requestResetPassword',\n    /* schemaPlans: '/v3/scheduleplans',\n  schemas: '/v3/uploadschemas',\n  schemasV4: '/v4/uploadschemas',\n  sharedmodules: '/v3/sharedmodules',*/\n    signIn: '/v3/auth/signIn',\n    signOut: '/v3/auth/signOut',\n\n    /* subpopulations: '/v3/subpopulations',\n  substudies: '/v3/substudies',\n  survey: '/v3/surveys',\n  surveys: '/v3/surveys',\n  templates: '/v3/templates',\n  topics: '/v3/topics',\n  uploads: '/v3/uploads',\n  uploadstatuses: '/v3/uploadstatuses',\n  users: '/v3/users',\n  verifyEmail: '/v1/apps/self/verifyEmail',\n  verifyAppEmail: '/v1/apps/self/emails/resendVerify'*/\n  },\n}\n","/Users/lli/mtb/src/routes_private.ts",["425"],"import AccessSettings from './components/access-settings/AccessSettings'\nimport AccountSetup from './components/account/AccountSetup'\nimport AssessmentDetail from './components/assessments/AssessmentDetail'\nimport AssessmentLibrary from './components/assessments/AssessmentLibrary'\nimport ParticipantManager from './components/studies/participants/ParticipantManager'\nimport StudyBuilder from './components/studies/StudyBuilder'\nimport StudyList from './components/studies/StudyList'\n\n\nexport default [\n  /* {\n    path: '/compliance-dashboard',\n    name: 'COMPLIANCE DASHBOARD',\n    Component: ComplianceDashboard,\n    exact: true,\n  },*/\n  {\n    path: '/studies',\n    name: 'MY STUDIES',\n    Component: StudyList,\n    exact: true,\n  },\n  { path: '/studies/builder/:id', name: '', Component: StudyBuilder },\n  { path: '/studies/builder/:id/:section', name: '', Component: StudyBuilder },\n  {\n    path: '/studies/:id/participant-manager',\n    name: '',\n    exact: false,\n    Component: ParticipantManager,\n  },\n  {\n    path: '/studies/:id/access-settings',\n    name: '',\n    exact: false,\n    Component: AccessSettings,\n  },\n\n  {\n    path: '/assessments',\n    name: 'ASSESSMENTS LIBRARY',\n    Component: AssessmentLibrary,\n    exact: false,\n  },\n  {\n    path: '/assessments/:id',\n    name: '',\n    Component: AssessmentDetail,\n    exact: true,\n  },\n  {\n    path: '/my-account',\n    name: 'ACCOUNT',\n    Component: AccountSetup,\n    exact: true,\n  },\n  /* {\n    path: '/sessionsLayout',\n    name: 'SessionBuilderLayout',\n    Component: SessionsLayout,\n  },*/\n]\n","/Users/lli/mtb/src/routes_public.ts",["426","427"],"import AssessmentLibrary from './components/assessments/AssessmentLibrary'\n\nimport StudyBuilder from './components/studies/StudyBuilder'\nimport AssessmentDetail from './components/assessments/AssessmentDetail'\nimport SessionsLayout from './components/layouts/sessions'\nimport HowItWorks from './components/static/HowItWorks'\nimport Plans from './components/static/Plans'\nimport DevelopmentTeam from './components/static/DevelopmentTeam'\nimport AccountCreate from './components/account/AccountCreate'\n\nexport default [\n  {\n    path: '/how-it-works',\n    name: 'HOW IT WORKS',\n    Component: HowItWorks,\n    exact: true,\n  },\n  {\n    path: '/assessments',\n    name: 'ASSESSMENTS LIBRARY',\n    Component: AssessmentLibrary,\n    exact: false,\n  },\n  {\n    path: '/assessments/:id',\n    name: '',\n    Component: AssessmentDetail,\n    exact: true,\n  },\n  {\n    path: '/plans',\n    name: 'PLANS',\n    Component: Plans,\n    exact: true,\n  },\n  {\n    path: '/layouts',\n    name: '',\n    Component: SessionsLayout,\n    exact: true,\n  },\n\n  {\n    path: '/development-team',\n    name: 'DEVELOPMENT TEAM',\n    Component: DevelopmentTeam,\n  },\n  {\n    path: '/create-account',\n    name: 'CREATE ACCOUNT',\n    Component: AccountCreate,\n    isRhs: true,\n  },\n]\n","/Users/lli/mtb/src/components/widgets/AppTopNav.tsx",["428","429","430","431"],"import React, { FunctionComponent, useState } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport {\n  Dialog,\n  DialogContent,\n  Divider,\n  Drawer,\n  Hidden,\n  IconButton,\n  Paper,\n} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport AccountLogin from '../account/AccountLogin'\n\nimport Logout from '../account/Logout'\nimport Logo from '../../assets/logo_mtb.svg'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\nimport { latoFont } from '../../style/theme'\n\nconst drawerWidth = '285px'\n\nconst useStyles = makeStyles(theme => ({\n  toolbarWrapper: {\n    height: '104px',\n    display: 'flex',\n    borderBottom: '1px solid #EAEAEA',\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n\n  toolbar: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    justifyContent: 'space-between',\n    overflowX: 'auto',\n    minHeight: '40px',\n  },\n  toolbarLink: {\n    padding: theme.spacing(1),\n    textDecoration: 'none',\n\n    flexShrink: 0,\n    //agendel todo Lato\n    fontFamily: latoFont,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontSize: '15px',\n    lineHeight: '18px',\n    color: '#393434',\n  },\n  selectedLink: {\n    fontWeight: 'bold',\n    color: '#393434;',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    float: 'right',\n    '&::after': {\n      content: '',\n      display: 'table',\n      clear: 'both',\n    },\n  },\n  login: {\n    borderLeft: '1px solid #EAEAEA',\n    paddingLeft: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginTop: theme.spacing(-4),\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    marginBottom: theme.spacing(-4),\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerMenuItem: {\n    textDecoration: 'none',\n\n    flexShrink: 0,\n    //agendel todo Lato\n    fontFamily: latoFont,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontSize: '15px',\n    lineHeight: '18px',\n    color: '#393434',\n    padding: '10px 0px 10px 40px',\n  },\n  drawerMenuSeparator: {\n    height: '2px',\n    margin: '20px 0px',\n    backgroundColor: '#2A2A2A',\n  },\n  /*drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end',\n    height: '72px',\n    marginBottom: '10px',\n  },\n  drawerCloseButton: {\n    width: '48px',\n  },\n  drawerCloseIcon: {\n    color: '#2A2A2A',\n  },*/\n  drawerPaper: {\n    width: drawerWidth,\n  },\n}))\n\ntype AppTopNavProps = {\n  routes: { name: string; path: string; isRhs?: boolean }[]\n  token?: string\n}\n\nconst MenuLinks: FunctionComponent<\n  AppTopNavProps & {\n    className: string\n    activeClassName: string\n  }\n> = ({ routes, token, className, activeClassName }) => {\n  const classes = useStyles()\n\n  let links = routes.map(route => (\n    <NavLink\n      to={route.path}\n      key={route.name}\n      className={className}\n      activeClassName={activeClassName}\n    >\n      {route.name}\n    </NavLink>\n  ))\n\n  return <>{links}</>\n}\n\nconst MenuLinksRhs: FunctionComponent<\n  AppTopNavProps & {\n    className: string\n    activeClassName: string\n  }\n> = ({ routes, token, className, activeClassName, children }) => {\n  const classes = useStyles()\n  let links\n  if (token) {\n    links = Array.isArray(children) ? children[0] : <></>\n  } else {\n    links = [\n      routes.map(route => (\n        <NavLink\n          to={route.path}\n          key={route.name}\n          className={className}\n          activeClassName={activeClassName}\n        >\n          {route.name}\n        </NavLink>\n      )),\n      Array.isArray(children) ? children[1] : <></>,\n    ]\n  }\n\n  return <>{links}</>\n}\n\nconst AppTopNav: FunctionComponent<AppTopNavProps> = ({\n  routes,\n\n  token,\n  ...props\n}: AppTopNavProps) => {\n  const classes = useStyles()\n  const [isSignInOpen, setIsSignInOpen] = useState(false)\n  const [isMobileOpen, setIsMobileOpen] = React.useState(false)\n\n  return (\n    <>\n      <Hidden lgUp>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"Open drawer\"\n          edge=\"end\"\n          onClick={() => setIsMobileOpen(!isMobileOpen)}\n          className={classes.menuButton}\n        >\n          <MenuIcon></MenuIcon>\n        </IconButton>\n      </Hidden>\n      <Hidden mdDown>\n        <Paper className={classes.toolbarWrapper} elevation={0}>\n          <img src={Logo} key=\"Mobile Toolbox\" className={classes.toolbar} />\n          <Toolbar\n            component=\"nav\"\n            variant=\"dense\"\n            disableGutters\n            className={classes.toolbar}\n          >\n            <MenuLinks\n              className={classes.toolbarLink}\n              activeClassName={classes.selectedLink}\n              routes={routes.filter(route => route.name && !route.isRhs)}\n            />\n          </Toolbar>\n          <Toolbar\n            component=\"nav\"\n            variant=\"dense\"\n            disableGutters\n            className={classes.toolbar}\n          >\n            <MenuLinksRhs\n              className={classes.toolbarLink}\n              activeClassName={classes.selectedLink}\n              routes={routes.filter(route => route.name && route.isRhs)}\n              token={token}\n            >\n              <div className={classes.login}>\n                <Logout\n                  element={\n                    <Button variant=\"text\" className={classes.drawerMenuItem}>\n                      Log out\n                    </Button>\n                  }\n                ></Logout>\n              </div>\n              <div className={classes.login}>\n                <Button\n                  variant=\"text\"\n                  className={classes.toolbarLink}\n                  onClick={() => setIsSignInOpen(true)}\n                >\n                  Sign in\n                </Button>\n              </div>\n            </MenuLinksRhs>\n          </Toolbar>\n        </Paper>\n      </Hidden>\n      <nav className={classes.drawer}>\n        <Drawer\n          variant=\"temporary\"\n          anchor=\"right\"\n          open={isMobileOpen}\n          onClose={() => setIsMobileOpen(false)}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          <MenuLinks\n            className={classes.drawerMenuItem}\n            activeClassName={classes.selectedLink}\n            routes={routes.filter(route => route.name && !route.isRhs)}\n          />\n\n          <Divider className={classes.drawerMenuSeparator} />\n          <MenuLinksRhs\n            className={classes.drawerMenuItem}\n            activeClassName={classes.selectedLink}\n            routes={routes.filter(route => route.name && route.isRhs)}\n            token={token}\n          >\n            <div className={classes.drawerMenuItem}>\n              <Logout\n                element={\n                  <Button\n                    variant=\"text\"\n                    className={classes.drawerMenuItem}\n                    style={{\n                      paddingLeft: '0',\n                      backgroundColor: 'transparent',\n                    }}\n                  >\n                    Log out\n                  </Button>\n                }\n              ></Logout>\n            </div>\n            <div className={classes.drawerMenuItem}>\n              <Button\n                variant=\"text\"\n                className={classes.drawerMenuItem}\n                onClick={() => setIsSignInOpen(true)}\n                style={{\n                  paddingLeft: '0',\n                  backgroundColor: 'transparent',\n                }}\n              >\n                Sign in\n              </Button>\n            </div>\n          </MenuLinksRhs>\n        </Drawer>\n      </nav>\n      <Dialog\n        open={isSignInOpen}\n        onClose={() => setIsSignInOpen(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogContent>\n          <AccountLogin\n            {...props}\n            callbackFn={() => setIsSignInOpen(false)}\n          ></AccountLogin>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n\nexport default AppTopNav\n","/Users/lli/mtb/src/components/studies/StudyList.tsx",["432"],"import {\n  Box,\n  Button,\n  Container,\n  Divider,\n  makeStyles,\n  Menu,\n  MenuItem\n} from '@material-ui/core'\nimport Link from '@material-ui/core/Link'\nimport React, { FunctionComponent, useEffect } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useUserSessionDataState } from '../../helpers/AuthContext'\nimport { getRandomId } from '../../helpers/utility'\nimport StudyService from '../../services/study.service'\nimport { Study, StudyStatus } from '../../types/types'\nimport ConfirmationDialog from '../widgets/ConfirmationDialog'\nimport { MTBHeading } from '../widgets/Headings'\nimport StudyCard from './StudyCard'\n\ntype StudyListOwnProps = {}\n\ntype StudySublistProps = {\n  status: StudyStatus\n  studies: Study[]\n  onAction: Function\n  renameStudyId: string\n}\n\ntype StudyAction = 'DELETE' | 'ANCHOR' | 'DUPLICATE' | 'RENAME'\n\nconst studyCardWidth = '290'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n  },\n  studyContainer: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '600px',\n    },\n  },\n\n  cardGrid: {\n    //const cardWidth = 300\n    display: 'grid',\n    padding: theme.spacing(0),\n    gridTemplateColumns: `repeat(auto-fill,${studyCardWidth}px)`,\n    gridColumnGap: theme.spacing(2),\n    gridRowGap: theme.spacing(2),\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(3),\n      justifyContent: 'center',\n      gridRowGap: theme.spacing(4),\n    },\n  },\n  divider: {\n    margin: `${theme.spacing(1)}px 0 ${theme.spacing(5)}px 0`,\n  },\n\n  filters: {\n    listStyle: 'none',\n    alignSelf: 'flex-end',\n    margin: '0',\n    paddingLeft: 0,\n  },\n\n  filterItem: {\n    display: 'inline-block',\n  },\n\n  createStudyButton: {\n    margin: theme.spacing(5, 2, 3),\n    width: '160px',\n    height: '49px',\n    backgroundColor: '#3A3A3A',\n    color: 'white',\n    '&:hover': {\n      transform: 'translateY(1px)',\n      backgroundColor: '#3A3A3A',\n    },\n    fontFamily: 'Lato',\n  },\n}))\n\nconst sections = [\n  {\n    status: 'DRAFT' as StudyStatus,\n    title: 'Draft Studies',\n    filterTitle: 'Draft',\n  },\n  {\n    status: 'ACTIVE' as StudyStatus,\n    title: 'Live Studies',\n    filterTitle: 'Live',\n  },\n  {\n    status: 'COMPLETED' as StudyStatus,\n    title: 'Completed Studies',\n    filterTitle: 'Completed',\n  },\n]\n\ntype StudyListProps = StudyListOwnProps & RouteComponentProps\n\nconst StudySublist: FunctionComponent<StudySublistProps> = ({\n  studies,\n  status,\n  //onSetAnchor,\n  renameStudyId,\n  onAction,\n}: StudySublistProps) => {\n  const classes = useStyles()\n  const item = sections.find(section => section.status === status)!\n  const displayStudies = studies.filter(study => study.status === status)\n  const studyLink =\n    status === 'DRAFT'\n      ? `/studies/builder/:id/session-creator`\n      : `/studies/:id/participant-manager`\n\n  if (!displayStudies.length) {\n    return <></>\n  }\n  return (\n    <>\n      <MTBHeading variant={'h2'} align={'left'}>\n        {' '}\n        {item.title}\n      </MTBHeading>\n\n      <Box className={classes.cardGrid}>\n        {displayStudies.map(study => (\n          <Link\n            style={{ textDecoration: 'none' }}\n            key={study.identifier}\n            variant=\"body2\"\n            href={studyLink.replace(':id', study.identifier)}\n          >\n            <StudyCard\n              study={study}\n              onRename={(newName: string) => {\n                onAction({ ...study, name: newName }, 'RENAME')\n              }}\n              isRename={renameStudyId === study.identifier}\n              onSetAnchor={(e: HTMLElement) => {\n                onAction(study, 'ANCHOR', e)\n              }}\n            ></StudyCard>\n          </Link>\n        ))}\n      </Box>\n    </>\n  )\n}\n\nconst StudyList: FunctionComponent<StudyListProps> = () => {\n  const { token} = useUserSessionDataState()\n  const [studies, setStudies] = React.useState<Study[]>([])\n  const [menuAnchor, setMenuAnchor] = React.useState<null | {\n    study: Study\n    anchorEl: HTMLElement\n  }>(null)\n  const [renameStudyId, setRenameStudyId] = React.useState('')\n  const classes = useStyles()\n  // const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n  const handleMenuClose = () => {\n    setMenuAnchor(null)\n  }\n  const closeConfirmationDialog = () => {\n    setIsConfirmDeleteOpen(false)\n    setMenuAnchor(null)\n  }\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = React.useState(false)\n\n  const [statusFilters, setStatusFilters] = React.useState<StudyStatus[]>(\n    sections.map(section => section.status),\n  )\n\n  const resetStatusFilters = () =>\n    setStatusFilters(sections.map(section => section.status))\n\n  const createStudy = async () => {\n    const newStudy: Study = {\n      identifier: getRandomId(),\n      status: 'DRAFT' as StudyStatus,\n      name: 'Untitled Study',\n    }\n    setStudies([...studies, newStudy])\n    const x = await StudyService.saveStudy(newStudy, token!)\n    setStudies(x)\n  }\n\n  const onAction = async (study: Study, type: StudyAction) => {\n    if (!token) {\n      return\n    }\n    handleMenuClose()\n    let result\n    switch (type) {\n      case 'RENAME':\n        setStudies(\n          studies.map(s => (s.identifier !== study.identifier ? s : study)),\n        )\n        console.log('studies', studies)\n        result = await StudyService.saveStudy(study, token)\n        setStudies(result)\n        setRenameStudyId('')\n        return\n\n      case 'DELETE':\n        const s = await StudyService.removeStudy(study.identifier, token)\n        console.log(studies.length)\n        console.log(s.length)\n        setStudies(s)\n        return\n\n      case 'DUPLICATE':\n        //const study = studies.find(s => s.identifier === tudy.identifier)\n        const newStudy = {\n          ...study!,\n          identifier: getRandomId(),\n          name: `Copy of ${study!.name}`,\n        }\n        setStudies([...studies, newStudy])\n        result = await StudyService.saveStudy(newStudy, token)\n        setStudies(result)\n        return\n      default: {\n      }\n    }\n  }\n\n  const isSelectedFilter = (filter: StudyStatus) =>\n    statusFilters.indexOf(filter) > -1 && statusFilters.length === 1\n\n  useEffect(() => {\n    let isSubscribed = true\n    const getInfo = async () => {\n      if (isSubscribed) {\n        try {\n          //setIsLoading(true)\n\n          const studies = await StudyService.getStudies(token!)\n\n          if (isSubscribed) {\n            setStudies(studies)\n          }\n        } catch (e) {\n          // isSubscribed && setError(e)\n        } finally {\n          // isSubscribed && setIsLoading(false)\n        }\n      }\n    }\n\n    getInfo()\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [])\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.studyContainer}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <ul className={classes.filters} aria-label=\"filters\">\n          <li className={classes.filterItem}>View by:</li>\n          <li className={classes.filterItem}>\n            <Button\n              onClick={resetStatusFilters}\n              style={{\n                color: 'inherit',\n                fontWeight: statusFilters.length > 1 ? 'bolder' : 'normal',\n                fontFamily: 'Poppins',\n              }}\n            >\n              All\n            </Button>\n          </li>\n          {sections.map(section => (\n            <li className={classes.filterItem} key={section.status}>\n              <Button\n                onClick={() => setStatusFilters([section.status])}\n                style={{\n                  color: 'inherit',\n                  fontWeight: isSelectedFilter(section.status)\n                    ? 'bolder'\n                    : 'normal',\n                  fontFamily: 'Poppins',\n                }}\n              >\n                {section.filterTitle}\n              </Button>\n            </li>\n          ))}\n        </ul>\n        <Button\n          variant=\"contained\"\n          onClick={() => createStudy()}\n          className={classes.createStudyButton}\n        >\n          + Create New Study\n        </Button>\n      </Box>\n      <Divider className={classes.divider}></Divider>\n      {studies?.length === 0 && (\n        <div>\n          You currently have no studies created. To begin, please click on\n          Create New Study.\n        </div>\n      )}\n      {studies.length > 0 &&\n        statusFilters.map((status, index) => (\n          <Box style={{ paddingBottom: index < 2 ? '24px' : '0' }} key={status}>\n            <StudySublist\n              studies={studies}\n              renameStudyId={renameStudyId}\n              status={status}\n              onAction={(s: Study, action: StudyAction, e: any) => {\n                action === 'ANCHOR'\n                  ? setMenuAnchor({ study: s, anchorEl: e })\n                  : onAction(s, action)\n              }}\n            />\n            {/*index < 2 && <Divider className={classes.divider}></Divider>*/}\n          </Box>\n        ))}\n\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={menuAnchor?.anchorEl}\n        keepMounted\n        open={Boolean(menuAnchor?.anchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={handleMenuClose}>View</MenuItem>\n        {menuAnchor?.study.status === 'DRAFT' && (\n          <MenuItem\n            onClick={() => {\n              setRenameStudyId(menuAnchor?.study.identifier)\n              handleMenuClose()\n            }}\n          >\n            Rename\n          </MenuItem>\n        )}\n\n        <MenuItem onClick={() => onAction(menuAnchor!.study, 'DUPLICATE')}>\n          Duplicate\n        </MenuItem>\n\n        <MenuItem onClick={() => setIsConfirmDeleteOpen(true)}>Delete</MenuItem>\n      </Menu>\n\n      <ConfirmationDialog\n        isOpen={isConfirmDeleteOpen}\n        title={'Delete Study'}\n        type={'DELETE'}\n        onCancel={closeConfirmationDialog}\n        onConfirm={() => {\n          closeConfirmationDialog()\n          onAction(menuAnchor!.study, 'DELETE')\n        }}\n      >\n        <div>\n          Are you sure you would like to permanently delete:{' '}\n          <p>{menuAnchor?.study.name}</p>\n        </div>\n      </ConfirmationDialog>\n    </Container>\n  )\n}\n\nexport default StudyList\n","/Users/lli/mtb/src/components/account/AccountCreate.tsx",[],"/Users/lli/mtb/src/components/static/DevelopmentTeam.tsx",[],"/Users/lli/mtb/src/components/account/AccountLogin.tsx",[],"/Users/lli/mtb/src/components/account/Logout.tsx",["433"],"import { makeStyles } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { Redirect } from 'react-router'\nimport { useUserSessionDataDispatch } from '../../helpers/AuthContext'\n\nconst useStyles = makeStyles(theme => ({}))\ntype LogoutProps = {\n  element: JSX.Element\n}\n\nexport const Logout: React.FunctionComponent<LogoutProps> = ({\n  element,\n}: LogoutProps) => {\n  const [navigate, setNavigate] = useState(false)\n\n  const sessionUpdateFn = useUserSessionDataDispatch()\n  const logout = () => {\n    sessionUpdateFn({ type: 'LOGOUT' })\n    setNavigate(true)\n  }\n  if (navigate) {\n    return <Redirect to={'/'} push={true} />\n  } else {\n    const e = React.cloneElement(element, { onClick: logout })\n    return e\n  }\n}\n\nexport default Logout\n","/Users/lli/mtb/src/services/study.service.ts",["434"],"import { callEndpoint } from '../helpers/utility'\nimport constants from '../types/constants'\nimport { Schedule, StudyDuration, StudySession } from '../types/scheduling'\nimport { Study } from '../types/types'\nimport { getItem, KEYS, MOCKS, setItem } from './lshelper'\n\nconst StudyService = {\n  getStudies,\n  getStudy,\n  saveStudy,\n  removeStudy,\n  getStudySessions,\n  saveStudySessions,\n  getStudySchedule,\n  saveStudySchedule,\n}\n\nasync function getStudies(token: string): Promise<Study[]> {\n  const studies = await callEndpoint<{ items: Study[] }>(\n    constants.endpoints.studies,\n    'GET',\n    {},\n    token,\n  )\n\n  return studies.data.items\n}\n\nasync function getStudy(id: string, token: string): Promise<Study | undefined> {\n  const study = await callEndpoint<{ data: Study }>(\n    constants.endpoints.study.replace(':id', id),\n    'GET',\n    {},\n    token,\n  )\n  return study.data.data\n}\n\nasync function getAllSchedules(): Promise<Schedule[] | null> {\n  let s = await getItem<Schedule[]>(KEYS.SCHEDULES)\n  if (!s) {\n    const mocks = MOCKS.SCHEDULE\n    //@ts-ignore\n    s = await setItem(KEYS.SCHEDULES, [mocks])\n  }\n\n  return s\n}\n\nasync function getStudySessions(\n  studyId: string,\n  token: string,\n): Promise<StudySession[] | undefined> {\n  const studySessions = await callEndpoint<{ items: StudySession[] }>(\n    constants.endpoints.scheduleSessions.replace(':id', studyId),\n    'GET',\n    {},\n    token,\n  )\n  return studySessions.data.items\n}\n\nasync function saveStudy(study: Study, token: string): Promise<Study[]> {\n  const { data } = await callEndpoint<{ items: Study[] }>(\n    constants.endpoints.study.replace(':id', study.identifier),\n    'POST',\n    study,\n    token,\n  )\n\n  return data.items\n}\n\nasync function removeStudy(studyId: string, token: string): Promise<Study[]> {\n  const { data } = await callEndpoint<{ items: Study[] }>(\n    constants.endpoints.study.replace(':id', studyId),\n    'DELETE',\n    {},\n    token,\n  )\n  return data.items\n}\n\nasync function saveStudySchedule(\n  studyId: string,\n  schedule: Schedule,\n  duration: StudyDuration,\n  token: string,\n): Promise<void> {\n  const study = await getStudy(studyId, token)\n  if (!study) {\n    return Promise.reject('no study')\n  }\n  study.studyDuration = duration\n\n  //save study\n  await saveStudy(study, token)\n\n  //save sessions\n  const studySessions = await callEndpoint<any>(\n    constants.endpoints.scheduleSessions.replace(':id', studyId),\n    'POST',\n    schedule.sessions,\n    token,\n  )\n\n  //save schedule\n  const sched = await callEndpoint<any>(\n    constants.endpoints.schedule.replace(':id', studyId),\n    'POST',\n    schedule,\n    token,\n  )\n  console.log(studySessions, sched)\n\n  return\n}\n\nasync function saveStudySessions(\n  studyId: string,\n  sessions: StudySession[],\n  token: string,\n): Promise<StudySession[]> {\n  const { data } = await callEndpoint<{ items: StudySession[] }>(\n    constants.endpoints.scheduleSessions.replace(':id', studyId),\n    'POST',\n    sessions,\n    token,\n  )\n\n  var promise = new Promise(function (resolve, reject) {\n    console.log('waiting')\n    window.setTimeout(function () {\n      resolve(data)\n    }, 2000)\n  })\n  await promise\n\n  return data.items\n}\n\n//returns scehdule and sessions\nasync function getStudySchedule(\n  studyId: string,\n  token: string,\n): Promise<Schedule> {\n  let sessions = await getStudySessions(studyId, token)\n  const { data } = await callEndpoint<{ data: Schedule }>(\n    constants.endpoints.schedule.replace(':id', studyId),\n    'GET',\n    {},\n    token,\n  )\n\n  return { ...data.data, sessions: sessions || [] }\n}\n\nexport default StudyService\n","/Users/lli/mtb/src/services/store_service.ts",["435"],"// This has to be here so that these filter values can be removed in the url to update the page.\n// This is very hacky...\nlocalStorage.removeItem('mtb-page')\n\nexport default {\n  set: function (key: string, value: any) {\n    console.debug('[cache] Setting', key)\n    localStorage.setItem(key, JSON.stringify(value))\n  },\n  get: function (key: string) {\n    let value = localStorage.getItem(key)\n    if (typeof value !== 'string') {\n      console.debug('[cache] Load miss from cache', key)\n      return null\n    }\n    console.debug('[cache] Loading from cache', key)\n    try {\n      return JSON.parse(value)\n    } catch (e) {\n      return null\n    }\n  },\n  remove: function (key: string) {\n    console.debug('[cache] Remove from cache', key)\n    localStorage.removeItem(key)\n  },\n  /* persistQuery: function(prefix: string, object: any) {\n    let queryString = fn.queryString(object, prefix);\n    let url = window.location.origin + window.location.pathname + queryString + document.location.hash;\n    window.history.pushState({ path: url }, \"\", url);\n  },\n  restoreQuery: function(prefix: string, ...arrayNames: string[]) {\n    let loc = document.location.search;\n    let arrayPropNames = arrayNames || [];\n    return fn.queryToObject(loc, arrayPropNames, prefix);\n  }*/\n}\n","/Users/lli/mtb/src/components/studies/StudyCard.tsx",["436","437"],"import { Box, IconButton, TextField } from '@material-ui/core'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\nimport React, { FunctionComponent } from 'react'\nimport { ThemeType } from '../../style/theme'\nimport { Study } from '../../types/types'\nimport LiveIcon from './LiveIcon'\nimport participants_icon from '../../assets/participants_icon.svg'\n\nconst DraftIcon = () => {\n  return (\n    <Box\n      width=\"100%\"\n      height=\"4px\"\n      borderRadius=\"5px\"\n      bgcolor=\"#C4C4C4\"\n      position=\"relative\"\n    >\n      <Box\n        width=\"20%\"\n        height=\"4px\"\n        borderRadius=\"5px 0 0 5px\"\n        bgcolor=\"#3E3030\"\n        position=\"absolute\"\n      ></Box>\n    </Box>\n  )\n}\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {\n    width: '290px',\n    height: '184px',\n    border: '1px solid gray',\n    position: 'relative',\n    backgroundColor: '#FFFFFF',\n    borderRadius: '0px',\n    borderWidth: '0px',\n    boxShadow: '0 4px 4px 0 rgb(0 0 0 / 35%)',\n  },\n  title: {\n    fontSize: 14,\n    fontFamily: 'Lato',\n    fontWeight: 'bold',\n    fontStyle: '12px',\n  },\n  liveIconContainer: {\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5),\n  },\n  cardStatus: {\n    fontFamily: 'Playfair Display',\n    fontStyle: 'italic',\n    fontSize: 'small',\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(1.25),\n  },\n  cardTopContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1.25, 1.25),\n    alignItems: 'center',\n  },\n  lastEditedTest: {\n    fontFamily: 'Lato',\n    fontSize: '10px',\n    fontWeight: 'lighter',\n  },\n  participantsRow: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    fontFamily: 'Lato',\n    fontSize: '12px',\n  },\n  participantsIcon: {\n    width: '25px',\n    height: '25px',\n    marginRight: theme.spacing(0.5),\n  },\n  studyStatusRow: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    fontFamily: 'Lato',\n    fontWeight: 'lighter',\n    fontSize: '10px',\n  },\n  cardBottomContainer: {\n    width: '100%',\n    padding: theme.spacing(0.5),\n  },\n  studyNameText: {\n    fontFamily: 'Poppins',\n    fontSize: '18px',\n  },\n  studyCardTextField: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst cancelPropagation = (e: React.MouseEvent) => {\n  e.stopPropagation()\n  e.preventDefault()\n}\n\nconst CardBottom: FunctionComponent<{\n  study: Study\n}> = ({ study }: { study: Study }) => {\n  const classes = useStyles()\n  return (\n    <Box\n      display=\"flex\"\n      textAlign=\"left\"\n      paddingTop=\"8px\"\n      position=\"absolute\"\n      bottom=\"8px\"\n      left=\"8px\"\n      right=\"8px\"\n    >\n      <div className={classes.cardBottomContainer}>\n        {study.status === 'DRAFT' ? (\n          <text className={classes.lastEditedTest}>Last edited:</text>\n        ) : (\n          <div className={classes.participantsRow}>\n            <img src={participants_icon} className={classes.participantsIcon} />\n            [56]\n          </div>\n        )}\n\n        <div className={classes.studyStatusRow}>\n          <text>\n            {study.status === 'DRAFT'\n              ? '[Dec. 2nd, 2018 @ 4:45pm]'\n              : '[Launched: Nov. 1, 2019 @ 4:45 pm]'}\n          </text>\n          <text>[Lynn B.]</text>\n        </div>\n      </div>\n    </Box>\n  )\n}\n\nconst CardTop: FunctionComponent<StudyCardProps> = ({\n  study,\n  onSetAnchor,\n}: StudyCardProps) => {\n  function getCorrectCardName(status: string): string {\n    if (status === 'DRAFT') {\n      return 'Draft'\n    } else if (status === 'COMPLETED') {\n      return 'Closed'\n    } else {\n      return 'Live'\n    }\n  }\n  const classes = useStyles()\n\n  return (\n    <Box\n      display=\"flex\"\n      textAlign=\"left\"\n      paddingTop=\"8px\"\n      className={classes.cardTopContainer}\n    >\n      {study.status !== 'COMPLETED' ? (\n        <IconButton\n          style={{ padding: '0' }}\n          onClick={e => {\n            cancelPropagation(e)\n            onSetAnchor(e.currentTarget)\n          }}\n        >\n          <MoreVertIcon />\n        </IconButton>\n      ) : (\n        <div />\n      )}\n      {study.status === 'ACTIVE' ? (\n        <div className={classes.liveIconContainer}>\n          <LiveIcon />\n        </div>\n      ) : (\n        <div className={classes.cardStatus}>\n          {getCorrectCardName(study.status)}\n        </div>\n      )}\n    </Box>\n  )\n}\n\ntype StudyCardProps = {\n  study: Study\n  onSetAnchor: Function\n  isRename?: boolean\n  onRename?: Function\n}\n\nconst StudyCard: FunctionComponent<StudyCardProps> = ({\n  study,\n  onSetAnchor,\n  isRename,\n  onRename,\n}) => {\n  const classes = useStyles()\n  const input = React.createRef<HTMLInputElement>()\n\n  const handleKeyDown = (\n    event: React.KeyboardEvent,\n    name: string | undefined,\n  ) => {\n    if (!onRename) {\n      return\n    }\n    const { key } = event\n    const keys = ['Escape', 'Tab']\n    const enterKey = 'Enter'\n    const allKeys = [...keys, enterKey]\n    console.log(key)\n    if (key === 'Escape') {\n      onRename(study.name)\n    }\n    if (key === 'Tab' || key === enterKey) {\n      onRename(name)\n    }\n  }\n  return (\n    <>\n      <Card\n        className={classes.root}\n        onClick={e => {\n          if (isRename) {\n            cancelPropagation(e)\n          }\n        }}\n      >\n        <>\n          <CardTop study={study} onSetAnchor={onSetAnchor}></CardTop>\n        </>\n        <CardContent>\n          <div>\n            {!isRename && (\n              <Typography\n                variant=\"h6\"\n                color=\"textSecondary\"\n                className={classes.studyNameText}\n                gutterBottom={study.status === 'DRAFT' ? true : false}\n              >\n                {study.name}\n              </Typography>\n            )}\n            {isRename && (\n              <TextField\n                variant=\"outlined\"\n                defaultValue={study.name}\n                size=\"small\"\n                className={classes.studyCardTextField}\n                inputRef={input}\n                onBlur={e => onRename && onRename(input.current?.value)}\n                onKeyDown={e => handleKeyDown(e, input.current?.value)}\n                onClick={e => cancelPropagation(e)}\n              />\n            )}\n          </div>\n          {study.status === 'DRAFT' && <DraftIcon />}\n          {study.status !== 'DRAFT' && (\n            <Typography className={classes.title} color=\"textSecondary\">\n              Study ID: {study.identifier}\n            </Typography>\n          )}\n        </CardContent>\n        <CardBottom study={study}></CardBottom>\n      </Card>\n    </>\n  )\n}\n\nexport default StudyCard\n","/Users/lli/mtb/src/components/widgets/ConfirmationDialog.tsx",[],"/Users/lli/mtb/src/components/widgets/Headings.tsx",[],"/Users/lli/mtb/src/components/account/PasswordReset.tsx",["438","439"],"import React, { FunctionComponent, useState } from 'react'\n\nimport UserService from '../../services/user.service'\nimport {\n  Button,\n  TextField,\n  Grid,\n  Typography,\n  Container,\n  makeStyles,\n  Snackbar,\n} from '@material-ui/core'\n\nimport Alert from '@material-ui/lab/Alert'\n\ntype PasswordResetProps = {\n  username: string\n  callbackFn: Function\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(1),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '400px',\n  },\n\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst PasswordReset: FunctionComponent<PasswordResetProps> = ({\n  username: _username,\n  callbackFn,\n}) => {\n  const classes = useStyles()\n  const [username, setUsername] = useState(_username)\n\n  const requestResetPassword = async (username: string) => {\n    console.log(username)\n    const response = await UserService.requestResetPassword(username)\n    const success = response.status === 200 || response.status === 202\n    callbackFn(\n      success,\n      success ? 'Password has been sent' : 'Password reset error',\n    )\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Typography component=\"h1\" variant=\"h5\">\n        Forgot Password\n      </Typography>\n      <div className={classes.paper}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"email\"\n          label=\"Email Address\"\n          name=\"email\"\n          autoComplete=\"email\"\n          value={username}\n          onChange={event => setUsername(event.target.value)}\n          autoFocus\n        />\n\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.submit}\n          disabled={!username}\n          onClick={() => requestResetPassword(username)}\n        >\n          Send Email\n        </Button>\n        <Grid container>\n          <Grid item xs>\n            <Button onClick={() => callbackFn('')} variant=\"text\">\n              Cancel\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  )\n}\n\nexport default PasswordReset\n","/Users/lli/mtb/src/components/widgets/Loader.tsx",[],"/Users/lli/mtb/src/components/static/Plans.tsx",[],"/Users/lli/mtb/src/components/static/HowItWorks.tsx",[],"/Users/lli/mtb/src/components/layouts/sessions.tsx",["440","441","442"],"import { Box, makeStyles } from '@material-ui/core'\nimport React, { FunctionComponent } from 'react'\n\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport clsx from 'clsx'\nimport { createStyles, useTheme, Theme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\n\nimport List from '@material-ui/core/List'\n\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport SomeIcon from '@material-ui/icons/FaceOutlined'\nimport {\n  MTBHeadingH1,\n  MTBHeadingH2,\n  MTBHeadingH3,\n  MTBHeadingH4,\n  MTBHeadingH5,\n} from '../widgets/Headings'\n\nconst drawerWidth = 212\n\nconst useStyles = makeStyles(theme => ({\n  mainArea: {\n    margin: '0 auto',\n    minHeight: '100px',\n    backgroundColor: '#cacacd',\n  },\n  mainAreaNormal: {\n    width: `${280 * 3 + 16 * 3}px`,\n  },\n  mainAreaWide: {\n    width: `${280 * 4 + 16 * 4}px`,\n    [theme.breakpoints.down('md')]: {\n      width: `${280 * 3 + 16 * 3}px`,\n    },\n  },\n\n  drawerPaper: {\n    position: 'static',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    /* ...theme.mixins.toolbar,*/\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\ntype SessionsLayoutOwnProps = {\n  title?: string\n  paragraph?: string\n}\n\ntype SessionsLayoutProps = SessionsLayoutOwnProps & RouteComponentProps\nconst cards = [1, 2, 3, 4, 5]\n\nconst SessionsLayout: FunctionComponent<SessionsLayoutProps> = ({\n  title = 'something',\n  paragraph,\n}) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false)\n\n  const toggleDrawer = () => {\n    setOpen(prev => !prev)\n  }\n  return (\n    <Box\n      paddingTop=\"16px\"\n      bgcolor=\"#997cbf29\"\n      display=\"flex\"\n      position=\"relative\"\n    >\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx(classes.drawerPaper, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div>\n          <IconButton onClick={toggleDrawer}>\n            {open ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {[\n            'Study Protocol',\n            'Sessions Creator',\n            'Scheduler',\n            'Participant Groups',\n          ].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>\n                {index % 2 === 0 ? <SomeIcon /> : <SomeIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Box height=\"500px\" bgcolor=\"#cec8c8\" flexGrow=\"0\" flexShrink=\"0\">\n          lef nav\n        </Box>\n      </Drawer>\n\n      <Box textAlign=\"center\" flexGrow=\"1\" bgcolor=\"#dde0de\">\n        <Box\n          className={clsx(classes.mainArea, {\n            [classes.mainAreaNormal]: open,\n            [classes.mainAreaWide]: !open,\n          })}\n        >\n          <MTBHeadingH1>H1_Playfair Display_italic_21 </MTBHeadingH1>\n          <MTBHeadingH2>H2_Poppins_Semibold_18pt</MTBHeadingH2>\n          <MTBHeadingH3>H3_Lato_Regular, 15pt, Top nav</MTBHeadingH3>\n          <MTBHeadingH4>H4_Lato_Bold, 15pt Selected top nav</MTBHeadingH4>\n          <MTBHeadingH5>H5_Poppins Regular, 14pt Left Nav Button</MTBHeadingH5>\n          <Box\n            display=\"grid\"\n            padding=\"8px\"\n            gridTemplateColumns=\"repeat(auto-fill,280px)\"\n            gridColumnGap=\"16px\"\n            gridRowGap=\"16px\"\n          >\n            {cards.map(card => (\n              <Box\n                width=\"280px\"\n                height=\"511px\"\n                border=\"1px solid black\"\n                bgcolor=\"#d5e5ec\"\n              >\n                card\n              </Box>\n            ))}\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default SessionsLayout\n","/Users/lli/mtb/src/components/studies/StudyBuilder.tsx",["443","444"],"import { Box } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport React, { FunctionComponent } from 'react'\nimport { ErrorBoundary, useErrorHandler } from 'react-error-boundary'\nimport { RouteComponentProps, useParams } from 'react-router-dom'\nimport { useStudyBuilderInfo } from '../../helpers/hooks'\nimport { ThemeType } from '../../style/theme'\nimport { Schedule, StudyDuration } from '../../types/scheduling'\nimport { ErrorFallback, ErrorHandler } from '../widgets/ErrorHandler'\nimport LoadingComponent from '../widgets/Loader'\nimport AppDesign from './app-design/AppDesign'\nimport Launch from './launch/Launch'\nimport NavButtons from './NavButtons'\nimport PassiveFeatures from './passive-features/PassiveFeatures'\nimport Scheduler from './scheduler/Scheduler'\nimport { StudySection } from './sections'\nimport SessionCreator from './session-creator/SessionCreator'\nimport StudyLeftNav from './StudyLeftNav'\nimport StudyTopNav from './StudyTopNav'\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  mainAreaWrapper: {\n    textAlign: 'center',\n    flexGrow: 1,\n    // backgroundColor: theme.palette.background.default\n  },\n  mainArea: {\n    margin: '0 auto',\n    minHeight: '100px',\n    //backgroundColor: theme.palette.background.default,\n  },\n  mainAreaNormal: {\n    width: `${280 * 3 + 16 * 3}px`,\n    [theme.breakpoints.down('md')]: {\n      width: `${280 * 2 + 16 * 2}px`,\n    },\n  },\n\n  mainAreaWider: {\n    width: `${280 * 4 + 16 * 3}px`,\n    [theme.breakpoints.down('md')]: {\n      width: `760px`,\n    },\n  },\n  mainAreaWide: {\n    width: `${280 * 4 + 16 * 4}px`,\n    [theme.breakpoints.down('md')]: {\n      width: `${280 * 3 + 16 * 3}px`,\n    },\n  },\n}))\n\ntype StudyBuilderOwnProps = {}\n\ntype StudyBuilderProps = StudyBuilderOwnProps & RouteComponentProps\n\nconst StudyBuilder: FunctionComponent<StudyBuilderProps> = ({ ...props }) => {\n  const classes = useStyles()\n  const handleError = useErrorHandler()\n\n  let { id, section: _section } = useParams<{\n    id: string\n    section: StudySection\n  }>()\n  const [section, setSection] = React.useState(_section)\n  const [nextSection, setNextSection] = React.useState<StudySection>(_section)\n  //const { data: study, status, error } = useStudy(id)\n  const { data: builderInfo, status, error, setData } = useStudyBuilderInfo(id, section)\n\n  const [open, setOpen] = React.useState(true)\n\n  function moveToNextSection(_section: StudySection) {\n    window.history.pushState(null, '', _section)\n    setSection(_section)\n  }\n\n  if (status === 'IDLE') {\n    return <>'no id'</>\n  } else if (status === 'REJECTED') {\n    handleError(error!)\n  } else if (status === 'RESOLVED') {\n    if (!builderInfo?.study) {\n      throw new Error('This session does not exist')\n    }\n  }\n  if (!builderInfo) {\n    return <></>\n  }\n\n  const ChildComponent: FunctionComponent<{}> = (): JSX.Element => {\n    const navButtons = (\n      <NavButtons\n        id={id}\n        currentSection={section}\n        onNavigate={(next: StudySection) => setNextSection(next)}\n      ></NavButtons>\n    )\n    switch (section) {\n      case 'scheduler':\n        return (\n          <Scheduler\n            {...props}\n            id={id}\n            section={section}\n            nextSection={nextSection}\n            schedule={builderInfo.schedule}\n            studyDuration={builderInfo.study?.studyDuration}\n            onNavigate={(\n              section: StudySection,\n              data: {\n                schedule: Schedule\n                studyDuration: StudyDuration\n              },\n            ) => {\n              setData({\n                ...builderInfo,\n                schedule: data.schedule,\n                study: {\n                  ...builderInfo.study,\n                  duration: data.studyDuration,\n                },\n              })\n              moveToNextSection(section)\n            }}\n          >\n            {navButtons}\n          </Scheduler>\n        )\n      case 'session-creator':\n        return (\n          <SessionCreator\n            {...props}\n            id={id}\n            nextSection={nextSection}\n            section={section}\n            sessions={builderInfo.schedule?.sessions || []}\n            onNavigate={(_section: StudySection, data: StudySection[]) => {\n              console.log(_section)\n              setData({\n                ...builderInfo,\n                schedule: { ...builderInfo.schedule, sessions: data },\n              })\n\n              moveToNextSection(_section)\n\n              console.log('section' + section)\n            }}\n          >\n            {navButtons}\n          </SessionCreator>\n        )\n      case 'branding':\n        return (\n          <AppDesign\n            {...props}\n            id={id}\n            section={section}\n            nextSection={nextSection}\n            onNavigate={(_section: StudySection, data: any) => {\n              console.log(_section)\n              moveToNextSection(_section)\n            }}\n          >\n            {navButtons}\n          </AppDesign>\n        )\n      case 'launch':\n        return (\n          <Launch\n            {...props}\n            id={id}\n            section={section}\n            nextSection={nextSection}\n            onNavigate={(_section: StudySection, data: any) => {\n              console.log(_section)\n              moveToNextSection(_section)\n            }}\n          >\n            {navButtons}\n          </Launch>\n        )\n      case 'passive-features':\n        return (\n          <PassiveFeatures\n            {...props}\n            id={id}\n            section={section}\n            nextSection={nextSection}\n            onNavigate={(_section: StudySection, data: any) => {\n              console.log(_section)\n              moveToNextSection(_section)\n            }}\n          >\n            {navButtons}\n          </PassiveFeatures>\n        )\n\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <>\n      <StudyTopNav studyId={id} currentSection={section}></StudyTopNav>\n      <Box paddingTop={2} display=\"flex\" position=\"relative\">\n        <StudyLeftNav\n          open={open}\n          onToggle={() => setOpen(prev => !prev)}\n          currentSection={section}\n          onNavigate={(loc: StudySection) => {\n            setNextSection(loc)\n          }}\n          id={id}\n        ></StudyLeftNav>\n\n        <Box className={classes.mainAreaWrapper}>\n          <Box\n            className={clsx(classes.mainArea, {\n              [classes.mainAreaNormal]: open,\n              [classes.mainAreaWider]: open && section === 'scheduler',\n              [classes.mainAreaWide]: !open,\n            })}\n          >\n            <ErrorBoundary\n              FallbackComponent={ErrorFallback}\n              onError={ErrorHandler}\n            >\n              <LoadingComponent reqStatusLoading={status}>\n                <ChildComponent></ChildComponent>\n              </LoadingComponent>\n            </ErrorBoundary>\n          </Box>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport default StudyBuilder\n","/Users/lli/mtb/src/components/account/AccountSetup.tsx",[],"/Users/lli/mtb/src/components/assessments/AssessmentDetail.tsx",["445","446","447","448"],"import {\n  Box,\n  Container,\n  createStyles,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n  useTheme\n} from '@material-ui/core'\nimport React, { FunctionComponent } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { RouteComponentProps, useParams } from 'react-router-dom'\nimport { useAsync } from '../../helpers/AsyncHook'\nimport { useUserSessionDataState } from '../../helpers/AuthContext'\nimport AssessmentService from '../../services/assessment.service'\nimport { Assessment } from '../../types/types'\nimport BreadCrumb from '../widgets/BreadCrumb'\nimport { MTBHeading } from '../widgets/Headings'\nimport ObjectDebug from '../widgets/ObjectDebug'\nimport AssessmentImage from './AssessmentImage'\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    breadCrumbs: {\n      backgroundColor: '#E5E5E5',\n      padding: `${theme.spacing(7)}px ${theme.spacing(5)}px  ${theme.spacing(\n        5,\n      )}px  ${theme.spacing(5)}px`,\n    },\n    container: {\n      padding: theme.spacing(6),\n    },\n  }),\n)\n\ntype AssessmentDetailOwnProps = {\n\n}\n\ntype AssessmentDetailProps = AssessmentDetailOwnProps & RouteComponentProps\n\nconst AssessmentDetail: FunctionComponent<AssessmentDetailProps> = (\n\n) => {\n  const { token } = useUserSessionDataState()\n  const classes = useStyles()\n  const theme = useTheme()\n\n  const links = [{ url: '/assessments', text: 'Assessments' }]\n\n  let { id } = useParams<{ id: string }>()\n\n  const handleError = useErrorHandler()\n\n  const { data, status, error, run, setData } = useAsync<Assessment>({\n    status: 'PENDING',\n    data: null,\n  })\n\n  React.useEffect(() => {\n    ///your async call\n\n    return run(\n      (async function (guid, token) {\n        const {\n          assessments,\n          tags,\n        } = await AssessmentService.getAssessmentsWithResources(id, token)\n        if (assessments.length === 0) {\n          throw ('no assessment found')\n        } else {\n          return assessments[0]\n        }\n      })(id, token),\n    )\n  }, [run, id, token])\n  if (status === 'PENDING' || !data) {\n    return <>loading component here</>\n  } else if (status === 'REJECTED') {\n    handleError(error!)\n  } else {\n    return (\n      <>\n        <Paper className={classes.breadCrumbs}>\n          <BreadCrumb links={links} currentItem={data.title}></BreadCrumb>\n        </Paper>\n        <ObjectDebug label=\"add\" data={data}></ObjectDebug>\n        <Container maxWidth=\"lg\" style={{ textAlign: 'center' }}>\n          <Paper className=\"classes.container\">\n            <Box display=\"flex\">\n              <Box width=\"530px\" marginRight=\"32px\">\n                <AssessmentImage\n                  name=\"X\"\n                  resources={data.resources}\n                  isSmall={true}\n                  variant={'LANDSCAPE'}\n                ></AssessmentImage>\n              </Box>\n              <Box textAlign=\"left\">\n                <Typography variant=\"subtitle2\">\n                  {data.tags.join(', ')}\n                </Typography>\n                <MTBHeading variant=\"h1\">{data.title}</MTBHeading>\n                <Box>{data.summary}</Box>\n                <Divider />\n                {data.duration} min\n              </Box>\n            </Box>\n          </Paper>\n        </Container>\n      </>\n    )\n  }\n  return <></>\n}\n\nexport default AssessmentDetail\n","/Users/lli/mtb/src/components/assessments/AssessmentLibrary.tsx",["449","450"],"import { makeStyles } from '@material-ui/core'\nimport React, { FunctionComponent, useState } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { Link, RouteComponentProps } from 'react-router-dom'\nimport { useAsync } from '../../helpers/AsyncHook'\nimport { useUserSessionDataState } from '../../helpers/AuthContext'\nimport AssessmentService from '../../services/assessment.service'\nimport { Assessment, StringDictionary } from '../../types/types'\nimport AssessmentCard from './AssessmentCard'\nimport AssessmentLibraryWrapper from './AssessmentLibraryWrapper'\n\ntype AssessmentLibraryOwnProps = {\n  assessments?: Assessment[]\n  tags?: string[]\n}\n\nconst useStyles = makeStyles(theme => ({\n  cardLink: {\n    textDecoration: 'none',\n  },\n}))\n\ntype AssessmentLibraryProps = AssessmentLibraryOwnProps & RouteComponentProps\n\nconst AssessmentLibrary: FunctionComponent<AssessmentLibraryProps> = ({\n  match,\n}: AssessmentLibraryProps) => {\n  const classes = useStyles()\n\n  const { token } = useUserSessionDataState()\n\n  const handleError = useErrorHandler()\n\n  const [filteredAssessments, setFilteredAssessments] = useState<\n    Assessment[] | undefined\n  >(undefined)\n\n  const { data, status, error, run, setData } = useAsync<{\n    assessments: Assessment[]\n    tags: StringDictionary<number>\n  }>({\n    status: 'PENDING',\n    data: null,\n  })\n\n  React.useEffect(() => {\n    ///your async call\n    return run(AssessmentService.getAssessmentsWithResources(undefined, token))\n  }, [run])\n  if (status === 'PENDING') {\n    return <>loading component here</>\n  }\n  if (status === 'REJECTED') {\n    handleError(error!)\n  }\n\n  if (!data?.assessments || (!data?.tags && status === 'RESOLVED')) {\n    return <>No Data </>\n  }\n\n  return (\n    <AssessmentLibraryWrapper\n      tags={data.tags}\n      assessments={data.assessments}\n      onChangeTags={\n        (assessments: Assessment[]) =>\n          setFilteredAssessments(assessments) /*setFilterTags(tags)*/\n      }\n    >\n      {(filteredAssessments || data.assessments).map((a, index) => (\n        <Link\n          to={`${match.url}/${a.guid}`}\n          className={classes.cardLink}\n          key={a.guid}\n        >\n          <AssessmentCard\n            index={index}\n            assessment={a}\n            key={a.guid}\n          ></AssessmentCard>\n        </Link>\n      ))}\n    </AssessmentLibraryWrapper>\n  )\n}\n\nexport default AssessmentLibrary\n","/Users/lli/mtb/src/components/studies/participants/ParticipantManager.tsx",["451","452"],"import { Box, Button, Grid, Switch } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport React, { FunctionComponent } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { CSVReader } from 'react-papaparse'\nimport { RouteComponentProps, useParams } from 'react-router-dom'\nimport { useAsync } from '../../../helpers/AsyncHook'\nimport { useUserSessionDataState } from '../../../helpers/AuthContext'\nimport ParticipantService from '../../../services/participants.service'\nimport { ParticipanRecord } from '../../../types/types'\nimport HideWhen from '../../widgets/HideWhen'\nimport ObjectDebug from '../../widgets/ObjectDebug'\nimport StudyTopNav from '../StudyTopNav'\nimport ParticipantTable, { HeadCell } from './ParticipantTable'\n\nconst useStyles = makeStyles({\n  root: {},\n  switchRoot: {\n    //padding: '8px'\n  },\n})\n\ntype ParticipantManagerOwnProps = {\n  title?: string\n  paragraph?: string\n  studyId?: string\n}\n\ninterface Data {\n  id: string\n  [key: string]: string | number\n}\n\nconst headCells: HeadCell<Data>[] = [\n  {\n    id: 'firstName',\n    numeric: false,\n    disablePadding: true,\n    label: 'firstName',\n  },\n  { id: 'lastName', numeric: true, disablePadding: false, label: 'lastName' },\n\n  {\n    id: 'createdOn',\n    numeric: true,\n    disablePadding: false,\n    label: 'createdOn',\n  },\n  { id: 'status', numeric: true, disablePadding: false, label: 'status' },\n]\n\nconst participantRecordTemplate: ParticipanRecord = {\n \n  phoneNumber: '',\n  healthCode: '',\n  clinicVisit: null,\n  status: '',\n  altId: '',\n  notes: '',\n}\ntype keys = keyof ParticipanRecord \n\nfunction parseCSVToJSON(rows: any[]):Partial<ParticipanRecord>[] {\n  const keys = Object.keys(participantRecordTemplate) as keys[]\n  let i = 0\n  const objects:Partial<ParticipanRecord>[] = []\n  for (const row of rows) {\n    console.log('row'+i)\n    console.log(row.data)\n    console.log(JSON.stringify(row.data))\n    let index = 0\n    let o: Partial<ParticipanRecord> = {}\n    // const newParticipant = {...participantRecordTemplate}\n    for (const key of keys) {\n      o[key] = row.data[index]\n      //@ts-ignore\n      console.log(o[key])\n      index++\n    }\n    i++\n    objects.push(o)\n  }\n  return objects\n}\n\ntype ParticipantManagerProps = ParticipantManagerOwnProps & RouteComponentProps\n\nconst ParticipantManager: FunctionComponent<ParticipantManagerProps> = ({\n  studyId,\n}) => {\n  let { id } = useParams<{ id: string }>()\n  const [isEdit, setIsEdit] = React.useState(false)\n  const handleError = useErrorHandler()\n  const classes = useStyles()\n  //if you need search params use the following\n  //const { param } = useParams<{ param: string}>()\n  //<T> is the type of data you are retrieving\n  const { token } = useUserSessionDataState()\n  const { data, status, error, run, setData } = useAsync<any>({\n    status: 'PENDING',\n    data: null,\n  })\n\n  const uploadFromCsv = () => {}\n  const handleOnDrop = (data: any) => {\n    console.log('---------------------------')\n    //console.log(data)\n    const objects = parseCSVToJSON(data)\n    debugger\n    console.log(objects)\n    console.log('---------------------------')\n  }\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.log(err)\n  }\n\n  React.useEffect(() => {\n    /* if (! studyId) {\n          return\n      }*/\n    ///your async call\n    return run(ParticipantService.getParticipants(token!))\n  }, [studyId, run])\n  if (status === 'PENDING') {\n    return <>loading component here</>\n  } else if (status === 'REJECTED') {\n    handleError(error!)\n  } else if (status === 'RESOLVED') {\n    return (\n      <div className={classes.root}>\n        <StudyTopNav studyId={id} currentSection={''}></StudyTopNav>\n        StudyId: {id}\n        <ObjectDebug label=\"part\" data={data}></ObjectDebug>\n        <Box border=\"1px slid black\">\n          <Grid component=\"label\" container alignItems=\"center\" spacing={0}>\n            <Grid item>View</Grid>\n            <Grid item>\n              <Switch\n                checked={isEdit}\n                classes={{ root: classes.switchRoot }}\n                onChange={e => setIsEdit(e.target.checked)}\n                name=\"viewEdit\"\n              />\n            </Grid>\n            <Grid item>Edit</Grid>\n          </Grid>\n\n          <Box>\n            <HideWhen hideWhen={!isEdit}>\n              <div style={{ display: 'inline' }}>\n                <Button>Move to</Button>\n\n                <Button>Unlink phone number</Button>\n                <Button>\n                  <DeleteIcon />\n                </Button>\n              </div>\n            </HideWhen>\n            <Button>Download</Button>\n          </Box>\n          <ParticipantTable\n            rows={data}\n            headCells={headCells}\n          ></ParticipantTable>\n          <CSVReader onDrop={handleOnDrop} onError={handleOnError}>\n            <span>Drop CSV file here or click to upload.</span>\n          </CSVReader>\n          <Button onClick={() => uploadFromCsv()}>Upload from CSV</Button>\n        </Box>\n      </div>\n    )\n  }\n  return <></>\n}\n\nexport default ParticipantManager\n","/Users/lli/mtb/src/helpers/hooks.ts",["453"],"import React from 'react'\nimport StudyService from '../services/study.service'\nimport { StudyBuilderInfo } from '../types/types'\nimport { useAsync } from './AsyncHook'\nimport { useUserSessionDataState } from './AuthContext'\n\n\nexport const useStudyBuilderInfo = (id: string | undefined) => {\n  const { token } = useUserSessionDataState()\n\n  const { data, status, error, run, setData } = useAsync<StudyBuilderInfo | undefined>({\n    status: id ? 'PENDING' : 'IDLE',\n    data: undefined,\n  })\n\n  const getData = async (id: string) => {\n    const schedule = await StudyService.getStudySchedule(id, token!)\n    const study = await StudyService.getStudy(id, token!)\n\n    return { schedule, study }\n  }\n\n  React.useEffect(() => {\n    if (!id || !token) {\n      return\n    }\n    return run(getData(id))\n  }, [id, run, token])\n\n  return {\n    setData,\n\n    error,\n    status,\n    data,\n    run,\n  }\n}\n\n","/Users/lli/mtb/src/services/access.service.ts",[],"/Users/lli/mtb/src/helpers/AsyncHook.ts",["454"],"import { RequestStatus } from '../types/types'\n\nimport React from 'react'\n\ninterface AsyncAction<T> {\n  type: RequestStatus\n  data: T | null\n  error?: Error | null\n}\n\ninterface AsyncReturnType<T> {\n  setData: Function\n  setError: Function\n  error?: Error | null | undefined\n  status: RequestStatus\n  data: T | null\n  run: Function\n}\n\ntype HookState<T> = {\n  status: RequestStatus\n  data: T | null\n  error?: Error | null | undefined\n}\n\nfunction useSafeDispatch<T>(dispatch: Function): Function {\n  const mountedRef = React.useRef(false)\n  React.useLayoutEffect(() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return React.useCallback(\n    (...args) => (mountedRef.current ? dispatch(...args) : void 0),\n    [dispatch],\n  )\n}\n\nfunction asyncReducer<T>(_state: any, action: AsyncAction<T>): HookState<T> {\n  switch (action.type) {\n    case 'PENDING': {\n      return { status: 'PENDING', data: null, error: null }\n    }\n    case 'RESOLVED': {\n      return { status: 'RESOLVED', data: action.data, error: null }\n    }\n    case 'REJECTED': {\n      return { status: 'REJECTED', data: null, error: action.error }\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\n\nexport function useAsync<T>(initialState?: HookState<T>): AsyncReturnType<T> {\n  const initState: HookState<T> = {\n    status: 'IDLE',\n    data: null,\n    error: null,\n    ...initialState,\n  }\n  const [state, unsafeDispatch] = React.useReducer<\n    React.Reducer<HookState<T>, AsyncAction<T>>\n  >(asyncReducer, initState)\n\n  const dispatch = useSafeDispatch<AsyncAction<T>>(unsafeDispatch)\n\n  const { data, error, status } = state\n\n  const run = React.useCallback(\n    promise => {\n      dispatch({ type: 'PENDING' })\n      promise.then(\n        (data: T) => {\n          dispatch({ type: 'RESOLVED', data })\n        },\n        (error: Error) => {\n          dispatch({ type: 'REJECTED', error })\n        },\n      )\n    },\n    [dispatch],\n  )\n\n  const setData = React.useCallback(\n    data => dispatch({ type: 'RESOLVED', data }),\n    [dispatch],\n  )\n  const setError = React.useCallback(\n    error => dispatch({ type: 'REJECTED', error }),\n    [dispatch],\n  )\n\n  return {\n    setData,\n    setError,\n    error,\n    status,\n    data,\n    run,\n  }\n}\n","/Users/lli/mtb/src/components/studies/StudyTopNav.tsx",["455"],"import { Hidden, IconButton, Paper, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PeopleIcon from '@material-ui/icons/People'\nimport React, { FunctionComponent } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport Logo from '../../assets/logo_mtb.svg'\nimport BreadCrumb from '../widgets/BreadCrumb'\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  toolbarStudyHeader: {\n    height: '104px',\n    display: 'flex',\n\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n\n  toolbar: {\n    overflowX: 'auto',\n    alignItems: 'baseline',\n    minHeight: 'auto',\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: theme.spacing(8),\n  },\n  toolbarLink: {\n    padding: theme.spacing(0, 2, 2, 2),\n    flexGrow: 1,\n\n    textDecoration: 'none',\n    color: 'inherit',\n    flexShrink: 0,\n  },\n  selectedLink: {\n    borderBottom: '2px solid black',\n    paddingBottom: theme.spacing(2),\n    marginButtom: '-1px',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    float: 'right',\n    '&::after': {\n      content: '',\n      display: 'table',\n      clear: 'both',\n    },\n  },\n}))\n\ntype StudyTopNavProps = {\n  //sections:? { name: string; path: string }[]\n  studyId: string\n  studyName?: string\n  currentSection?: string\n}\n\nconst StudyTopNav: FunctionComponent<StudyTopNavProps> = ({\n  studyId,\n  studyName,\n  currentSection,\n}: StudyTopNavProps) => {\n  const links = [\n    { path: '/studies/builder/:id/', name: 'STUDY BUILDER' },\n    { path: '/studies/:id/participant-manager', name: 'PARTICIPANT MANAGER' },\n    { path: '/studies/:id/compliance', name: 'ADHERENCE DATA' },\n    { path: '/studies/:id/study-data', name: 'STUDY DATA' },\n  ]\n  const [isMobileOpen, setIsMobileOpen] = React.useState(false)\n  const classes = useStyles()\n  //const sessionData = useUserSessionDataState()\n\n  return (\n    <>\n      <Hidden lgUp>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"Open drawer\"\n          edge=\"end\"\n          onClick={() => setIsMobileOpen(!isMobileOpen)}\n          className={classes.menuButton}\n        >\n          <MenuIcon></MenuIcon>\n        </IconButton>\n      </Hidden>\n      <Hidden mdDown>\n        <Paper className={classes.toolbarStudyHeader} elevation={0}>\n          <Toolbar\n            component=\"nav\"\n            variant=\"dense\"\n            disableGutters\n            className={classes.toolbar}\n            style={{\n              marginTop: '48px',\n              paddingTop: '0',\n              alignItems: 'center',\n            }}\n          >\n            <NavLink\n              to={'/'}\n              key=\"home\"\n              className={classes.toolbarLink}\n              style={{ paddingBottom: '0' }}\n            >\n              <img src={Logo} key=\"home\" />\n            </NavLink>\n\n            <BreadCrumb\n              links={[{ url: '/Studies', text: '' }]}\n              currentItem={studyName || 'Utitled Study '}\n            ></BreadCrumb>\n          </Toolbar>\n          <Toolbar className={classes.toolbar}>\n            {links\n              .filter(section => section.name)\n              .map(section => (\n                <NavLink\n                  to={section.path.replace(':id', studyId)}\n                  key={section.path}\n                  className={classes.toolbarLink}\n                  activeClassName={classes.selectedLink}\n                >\n                  {section.name}\n                </NavLink>\n              ))}\n          </Toolbar>\n          <Toolbar className={classes.toolbar}>\n            <NavLink\n              to={'/studies/:id/access-settings'.replace(':id', studyId)}\n              key={'path-to-access-settings'}\n              className={classes.toolbarLink}\n              activeClassName={classes.selectedLink}\n              style={{ display: 'flex' }}\n            >\n              <PeopleIcon></PeopleIcon>&nbsp;&nbsp;Access settings\n            </NavLink>\n          </Toolbar>\n          {currentSection && (\n            <Typography component=\"h1\">{currentSection}</Typography>\n          )}\n        </Paper>\n      </Hidden>\n    </>\n  )\n}\n\nexport default StudyTopNav\n","/Users/lli/mtb/src/services/participants.service.ts",["456"],"import { callEndpoint } from '../helpers/utility'\nimport constants from '../types/constants'\nimport { LoggedInUserData, Response } from '../types/types'\n\nasync function getParticipants(token: string): Promise<LoggedInUserData[]> {\n  const e = constants.endpoints.participants\n  const result = await callEndpoint<{ items: LoggedInUserData[] }>(\n    e,\n    'POST',\n    {},\n    token,\n  )\n  return result.data.items\n}\n\nconst ParticipantService = {\n  getParticipants,\n}\n\nexport default ParticipantService\n","/Users/lli/mtb/src/components/studies/StudyLeftNav.tsx",["457","458"],"import { Box, Drawer, IconButton, makeStyles } from '@material-ui/core'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport SomeIcon from '@material-ui/icons/SentimentVerySatisfied'\nimport clsx from 'clsx'\nimport React, { FunctionComponent } from 'react'\nimport { ThemeType } from '../../style/theme'\nimport SideBarListItem from '../widgets/SideBarListItem'\nimport { SECTIONS as sectionLinks, StudySection } from './sections'\nimport CreateSessionIcon from '../../assets/create_session_icon.svg'\nimport CustomizeAppIcon from '../../assets/customize_app_icon.svg'\nimport LaunchStudyIcon from '../../assets/launch_study_icon.svg'\nimport PassiveFeaturesIcon from '../../assets/passive_features_icon.svg'\nimport PreviewStudyIcon from '../../assets/preview_study_icon.svg'\nimport ScheduleSesssionsIcon from '../../assets/schedule_sessions_icon.svg'\n\nconst drawerWidth = 212\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {\n    margin: 0,\n    padding: 0,\n    listStyle: 'none',\n\n    '& li': {\n      padding: theme.spacing(10, 0),\n      fontSize: 18,\n    },\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(6),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(6),\n    },\n  },\n  list: {\n    margin: '0',\n    padding: '0',\n    position: 'relative',\n    listStyle: 'none',\n  },\n  drawerPaper: {\n    fontSize: '14px',\n    position: 'static',\n    border: 'none',\n    backgroundColor: '#F2F2F2',\n    boxShadow:\n      '0px 3px 3px -2px rgba(0,0,0,0.2), 0px 3px 4px 0px rgba(0,0,0,0.14), 0px 1px 8px 0px rgba(0,0,0,0.12)',\n  },\n  navIcon: {\n    marginRight: theme.spacing(2),\n    width: '18px',\n    height: '18px',\n    alignSelf: 'center',\n    justifyContent: 'center',\n  },\n  navIconImageContainer: {\n    display: 'flex',\n  },\n}))\n\ntype StudyLeftNavOwnProps = {\n  currentSection?: StudySection\n  id?: string\n  open: boolean\n  onToggle: Function\n  onNavigate: Function\n}\n\ntype StudyLeftNavProps = StudyLeftNavOwnProps\n\nconst StudyLeftNav: FunctionComponent<StudyLeftNavProps> = ({\n  id,\n  open,\n  onToggle,\n  onNavigate,\n  currentSection = 'sessions-creator',\n}) => {\n  const classes = useStyles()\n\n  const navIcons = [\n    CustomizeAppIcon,\n    CreateSessionIcon,\n    ScheduleSesssionsIcon,\n    PassiveFeaturesIcon,\n    PreviewStudyIcon,\n    LaunchStudyIcon,\n  ]\n\n  const toggleDrawer = () => {\n    onToggle()\n  }\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      elevation={1}\n      className={clsx(classes.drawer, {\n        [classes.drawerOpen]: open,\n        [classes.drawerClose]: !open,\n      })}\n      classes={{\n        paper: clsx(classes.drawerPaper, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        }),\n      }}\n    >\n      <Box textAlign=\"right\" height=\"48px\" bgcolor=\"#FAFAFA\">\n        <IconButton\n          onClick={toggleDrawer}\n          style={{ borderRadius: 0, width: '48px', height: '100%' }}\n        >\n          {open ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n        </IconButton>\n      </Box>\n      <ul className={classes.list}>\n        {sectionLinks.map((sectionLink, index) => (\n          <SideBarListItem\n            itemKey={sectionLink.path}\n            isOpen={open}\n            isActive={sectionLink.path === currentSection}\n            onClick={() => onNavigate(sectionLink.path)}\n          >\n            <div className={classes.navIconImageContainer}>\n              <img src={navIcons[index]} className={classes.navIcon} />\n              <span>{sectionLink.name}</span>\n            </div>\n          </SideBarListItem>\n        ))}\n      </ul>\n    </Drawer>\n  )\n}\n\nexport default StudyLeftNav\n","/Users/lli/mtb/src/components/studies/NavButtons.tsx",["459","460","461"],"import { Box, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { SECTIONS as sectionLinks, StudySection } from './sections'\n\n\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport interface NavButtonsProps {\n  currentSection: StudySection\n  id: string\n  onNavigate: Function\n}\n\nconst NavButtons: React.FunctionComponent<NavButtonsProps> = ({\n  currentSection,\n  id,\n  onNavigate,\n}: NavButtonsProps) => {\n  const classes = useStyles()\n  const currentIndex = sectionLinks.findIndex(i => i.path === currentSection)\n  const prev = currentIndex > 0 ? sectionLinks[currentIndex - 1] : undefined\n  const next =\n    currentIndex + 1 < sectionLinks.length\n      ? sectionLinks[currentIndex + 1]\n      : undefined\n\n  const NavLink = (props: any) => {\n    const { id, section } = props\n\n    const go = (loc: string) => {\n      window.location.replace(loc)\n    }\n    if (!section) {\n      return <></>\n    }\n    return (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => onNavigate(section.path/*`/studies/builder/${id}/${section.path}`*/)}\n        //onClick={()=> go(`/studies/builder/${id}/${section.path}`)}\n      >\n        {section.name}\n      </Button>\n    )\n  }\n  const result = (\n    <Box paddingTop=\"16px\" textAlign=\"right\">\n      <NavLink id={id} section={prev}></NavLink>&nbsp;&nbsp;\n      <NavLink id={id} section={next}></NavLink>\n    </Box>\n  )\n  return result\n}\n\nexport default NavButtons\n","/Users/lli/mtb/src/components/studies/session-creator/SessionCreator.tsx",["462"],"/Users/lli/mtb/src/components/studies/app-design/AppDesign.tsx",["463","464","465","466","467","468"],"import {\n  Box,\n  Button,\n  CircularProgress,\n  Divider,\n  Paper,\n  TextField,\n  Typography\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ReactColorPicker from '@super-effective/react-color-picker'\nimport React, { ChangeEvent, useState } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\n//import { ReactComponent as PhoneBg } from '../../../assets/phone_bg.svg'\nimport PhoneBg from '../../../assets/phone_bg.svg'\nimport { bytesToSize } from '../../../helpers/utility'\nimport { ThemeType } from '../../../style/theme'\nimport { StudyBuilderComponentProps } from '../../../types/types'\n\n\nconst topBarHeight = '48px'\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {\n    padding: theme.spacing(3),\n  },\n  section: {\n    display: 'flex',\n  },\n  phone: {\n    backgroundImage: 'url(' + PhoneBg + ')',\n    width: '308px',\n    height: '635px',\n    backgroundRepeat: 'no-repeat',\n  },\n  phoneTopBar: {\n    width: '100%',\n    height: topBarHeight,\n    borderRadius: '40px 40px 0 0',\n    //backgroundColor: 'red',\n    borderStyle: 'solid',\n    borderWidth: '3px 3px 1px 3px',\n    borderColor: 'black',\n  },\n  preview: {\n    backgroundColor: '#EBEBEB',\n    padding: '0 .8rem',\n    fontSize: '1.6rem',\n    //margin: '0 -50px 30px -50px',\n\n    '& > div': {\n      padding: '15px 13px',\n    },\n    '& img': {\n      width: '100%',\n    },\n  },\n  fields: {\n    marginLeft: theme.spacing(2),\n    display: 'flex',\n    flexGrow: 1,\n    flexDirection: 'column',\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '100%',\n    },\n  },\n}))\n\ntype PreviewFile = {\n  file: File\n  name: string\n  size: number\n  body?: string\n}\n\ntype UploadedFile = {\n  success: boolean\n  fileName: string\n  message: string\n}\n\nexport interface AppDesignProps {\n  id: string\n\n}\n\nfunction getPreviewForImage(file: File): PreviewFile {\n  const previewFileBody = URL.createObjectURL(file)\n  return {\n    file: file,\n    body: previewFileBody,\n    name: file.name,\n    size: file.size,\n  }\n}\n\nconst AppDesign: React.FunctionComponent<AppDesignProps & StudyBuilderComponentProps> = ({\n  id,\n  hasObjectChanged, saveLoader, children\n}: AppDesignProps &  StudyBuilderComponentProps) => {\n  const handleError = useErrorHandler()\n\n  const classes = useStyles()\n\n\n  const [color, setColor] = useState<string | undefined>()\n  const [previewFile, setPreviewFile] = useState<PreviewFile>()\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])\n\n\n  const [logo, setLogo] = useState()\n\n\n\n  \n  async function handleFileChange(event: ChangeEvent<HTMLInputElement>) {\n    event.persist()\n    if (!event.target.files) {\n      return\n    }\n    const file = event.target.files[0]\n    setPreviewFile(getPreviewForImage(file))\n  }\n\n  const getActionButtons = (file?: File): JSX.Element => {\n    const getUploadButton = (\n      cta: string,\n      variant?: 'contained' | 'outlined',\n    ) => (\n      <Button\n        variant={variant || 'contained'}\n        component=\"label\"\n        fullWidth\n        color=\"primary\"\n        style={{ marginTop: '20px' }}\n      >\n        {cta}\n        <input\n          accept=\"image/*,.pdf,.doc,.docx,.jpg,.png, .txt\"\n          id=\"file\"\n          multiple={false}\n          type=\"file\"\n          onChange={e => handleFileChange(e)}\n          style={{ display: 'none' }}\n        />\n      </Button>\n    )\n\n    return getUploadButton('Upload')\n  }\n\n    return (\n      <Paper className={classes.root} elevation={2}>\n        <Box className={classes.section}>\n          <Box className={classes.phone}>\n            <div\n              className={classes.phoneTopBar}\n              style={{ backgroundColor: color || 'transparent' }}\n            >\n              {previewFile && (\n                <img src={previewFile.body} style={{ height: topBarHeight }} />\n              )}\n            </div>\n            phone\n          </Box>\n          <Box className={classes.fields}>\n            <div className={classes.preview}>\n              {previewFile && (\n                <div>\n                  {previewFile.name} ({bytesToSize(previewFile.size)})\n                </div>\n              )}\n            </div>\n\n            {saveLoader && (\n              <div className=\"text-center\">\n                <CircularProgress color=\"primary\" />\n              </div>\n            )}\n            <Typography variant=\"h4\"> Upload logo</Typography>\n            {getActionButtons(previewFile?.file)}\n            <p>&nbsp;</p>\n            <Typography variant=\"h4\"> Select Log background color</Typography>\n\n            <ReactColorPicker\n              color={color}\n              onChange={(color: string) => setColor(color)}\n            />\n\n            <TextField\n              id=\"outlined-textarea\"\n              label=\"Multiline Placeholder\"\n              placeholder=\"Placeholder\"\n              multiline\n              variant=\"outlined\"\n            />\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Multiline\"\n              multiline\n              rows={4}\n              defaultValue=\"Default Value\"\n              variant=\"outlined\"\n            />\n          </Box>\n        </Box>\n        <Divider />\n        <Box>box2</Box>\n        <Divider />\n        <Box>box3</Box>\n        jsx-output-here appdesign\n      </Paper>\n    )\n  }\n  \n\n\nexport default AppDesign","/Users/lli/mtb/src/components/studies/launch/Launch.tsx",[],"/Users/lli/mtb/src/components/studies/passive-features/PassiveFeatures.tsx",["469","470","471","472"],"import { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { ThemeType } from '../../../style/theme'\nimport { StudyBuilderComponentProps } from '../../../types/types'\n\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {},\n}))\n\nexport interface PassiveFeaturesProps {\n  id: string\n}\n\nconst PassiveFeatures: React.FunctionComponent<\n  PassiveFeaturesProps & StudyBuilderComponentProps\n> = ({\n  id,\n  onUpdate,\n  hasObjectChanged,\n  saveLoader,\n  children,\n}: PassiveFeaturesProps & StudyBuilderComponentProps) => {\n  const handleError = useErrorHandler()\n\n  const classes = useStyles()\n\n\n  const [activeStep, setActiveStep] = React.useState(0)\n\n  return (\n    <>\n      {' '}\n      <h3>Passive Features</h3>\n    </>\n  )\n}\n\nexport default PassiveFeatures\n","/Users/lli/mtb/src/components/studies/scheduler/Scheduler.tsx",["473"],"import {\n  Box,\n  Button,\n  createStyles,\n  FormControlLabel,\n  makeStyles,\n  Theme\n} from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport * as _ from 'lodash'\nimport React, { FunctionComponent } from 'react'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport { poppinsFont } from '../../../style/theme'\nimport {\n  HDWMEnum,\n  Schedule,\n  SessionSchedule,\n  StartEventId,\n  StudyDuration\n} from '../../../types/scheduling'\nimport { StudyBuilderComponentProps } from '../../../types/types'\nimport ConfirmationDialog from '../../widgets/ConfirmationDialog'\nimport Duration from './Duration'\nimport IntroInfo from './IntroInfo'\nimport SchedulableSingleSessionContainer from './SchedulableSingleSessionContainer'\nimport actionsReducer, {\n  ActionTypes,\n  SessionScheduleAction\n} from './scheduleActions'\nimport StudyStartDate from './StudyStartDate'\nimport TimelinePlot from './TimelinePlot'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    labelDuration: {\n      paddingTop: theme.spacing(1),\n      paddingRight: theme.spacing(2),\n      fontFamily: poppinsFont,\n      fontSize: '18px',\n      fontStyle: 'normal',\n      fontWeight: 600,\n    },\n    scheduleHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingRight: theme.spacing(2),\n    },\n  }),\n)\n\ntype SchedulerProps = {\n  id: string\n  schedule: Schedule\n  studyDuration?: StudyDuration\n  onSave: Function\n}\n\nconst Scheduler: FunctionComponent<\n  SchedulerProps & StudyBuilderComponentProps\n> = ({\n  hasObjectChanged: _changed,\n  saveLoader,\n  onUpdate,\n  schedule: _schedule,\n  onSave,\n  studyDuration,\n  children,\n}: SchedulerProps & StudyBuilderComponentProps) => {\n  const classes = useStyles()\n  const [isInitialInfoSet, setIsInitialInfoSet] = React.useState(false)\n  const [schedule, setSchedule] = React.useState({ ..._schedule })\n  const [duration, setDuration] = React.useState(studyDuration)\n  const[hasObjectChanged, setHasObjectChanged] = React.useState(_changed)\n  console.log('rerender', duration)\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      const equal = _.isEqual(_schedule, schedule) && _.isEqual(studyDuration, duration)\n      if (!equal) {\n        console.log('duration', duration)\n        onUpdate({ schedule, studyDuration: duration })\n      }\n    }, 5000)\n    // Clear timeout if the component is unmounted\n    return () => clearInterval(timer)\n  })\n\n  React.useEffect(() => {\n    if (!isInitialInfoSet) {\n      return\n    }\n\n    onSave()\n  }, [isInitialInfoSet])\n\n  const saveSession = async (sessionId: string) => {\n    onSave()\n  }\n\n  //setting new state\n  const updateData = (schedule: Schedule, duration: string) => {\n    setSchedule(schedule)\n    setDuration(duration)\n    setHasObjectChanged(true)\n  }\n\n  //set duration part\n  const setStudyDuration = (duration: string) => {\n    updateData(schedule, duration)\n  }\n\n  //updating the schedule part\n  const updateSchedule = (schedule: Schedule) => {\n    updateData(schedule, duration || '')\n  }\n\n  //updating on the intro screen\n  const setInitialInfo = async (duration: string, start: StartEventId) => {\n    const _schedule = { ...schedule, startEventId: start }\n    updateData(_schedule, duration)\n    setIsInitialInfoSet(true)\n  }\n\n  const scheduleUpdateFn = (action: SessionScheduleAction) => {\n    const sessions = actionsReducer(schedule.sessions, action)\n    const newSchedule = { ...schedule, sessions }\n    updateData(newSchedule, studyDuration || '')\n  }\n\n  return (\n    <>\n     \n      <NavigationPrompt when={hasObjectChanged}>\n        {({ onConfirm, onCancel }) => (\n          <ConfirmationDialog\n            isOpen={hasObjectChanged}\n            type={'NAVIGATE'}\n            onCancel={onCancel}\n            onConfirm={onConfirm}\n          />\n        )}\n      </NavigationPrompt>\n\n      {!schedule.startEventId && (\n        <IntroInfo onContinue={setInitialInfo}></IntroInfo>\n      )}\n\n      {/**/}\n      {schedule.startEventId && (\n        <Box textAlign=\"left\">\n          <div className={classes.scheduleHeader}>\n            <FormControlLabel\n              classes={{ label: classes.labelDuration }}\n              label=\"Study duration:\"\n              style={{ fontSize: '14px' }}\n              labelPlacement=\"start\"\n              control={\n                <Duration\n                  onChange={e => setStudyDuration(e.toString())}\n                  durationString={studyDuration || ''}\n                  unitLabel=\"study duration unit\"\n                  numberLabel=\"study duration number\"\n                  unitData={HDWMEnum}\n                ></Duration>\n              }\n            />\n            {hasObjectChanged && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => onSave()}\n                startIcon={<SaveIcon />}\n              >\n                Save changes\n              </Button>\n            )}\n          </div>\n          <Box bgcolor=\"#fff\" p={2} mt={3}>\n            <TimelinePlot></TimelinePlot>\n            <StudyStartDate\n              style={{ marginTop: '16px' }}\n              startEventId={schedule.startEventId as StartEventId}\n              onChange={(startEventId: StartEventId) => {\n                \n                updateSchedule({ ...schedule, startEventId })\n              }\n              }\n            />\n\n            {schedule.sessions.map((session, index) => (\n              <Box key={session.id}>\n                <SchedulableSingleSessionContainer\n                  key={session.id}\n                  studySession={session}\n                  onSaveSessionSchedule={() => saveSession(session.id)}\n                  onUpdateSessionSchedule={(schedule: SessionSchedule) => {\n                    scheduleUpdateFn({\n                      type: ActionTypes.UpdateSessionSchedule,\n                      payload: { sessionId: session.id, schedule },\n                    })\n                  }}\n                ></SchedulableSingleSessionContainer>\n              </Box>\n            ))}\n          </Box>\n\n          {children}\n        </Box>\n      )}\n    </>\n  )\n}\n\nexport default Scheduler\n","/Users/lli/mtb/src/components/studies/participants/ParticipantTable.tsx",["474","475","476","477","478","479"],"import React, { FunctionComponent } from 'react'\nimport clsx from 'clsx'\nimport {\n  createStyles,\n  lighten,\n  makeStyles,\n  Theme,\n} from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport FilterListIcon from '@material-ui/icons/FilterList'\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\ntype Order = 'asc' | 'desc'\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map(el => el[0])\n}\n\nexport interface HeadCell<T> {\n  disablePadding: boolean\n  id: keyof T\n  label: string\n  numeric: boolean\n}\n\ninterface ParticipantTableHeaderProps<T> {\n  classes: ReturnType<typeof useStyles>\n  numSelected: number\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T) => void\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void\n  order: Order\n  orderBy: string\n  rowCount: number\n  rows: T[]\n  headCells: HeadCell<T>[]\n}\n\ninterface ParticipantTableProps {\n  rows: any[]\n  headCells: any[]\n}\n\nfunction ParticipantTableHead<T>(props: ParticipantTableHeaderProps<T>) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    headCells,\n    onRequestSort,\n  } = props\n  const createSortHandler = (property: keyof T) => (\n    event: React.MouseEvent<unknown>,\n  ) => {\n    onRequestSort(event, property)\n  }\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map(headCell => (\n          <TableCell\n            key={headCell.id.toString()}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nconst useToolbarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n    },\n    highlight:\n      theme.palette.type === 'light'\n        ? {\n            color: theme.palette.secondary.main,\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n          }\n        : {\n            color: theme.palette.text.primary,\n            backgroundColor: theme.palette.secondary.dark,\n          },\n    title: {\n      flex: '1 1 100%',\n    },\n  }),\n)\n\ninterface ParticipantTableToolbarProps {\n  numSelected: number\n}\n\nconst ParticipantTableToolbar = (props: ParticipantTableToolbarProps) => {\n  const classes = useToolbarStyles()\n  const { numSelected } = props\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          &nbsp;\n        </Typography>\n      )}\n      {/*numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )*/}\n    </Toolbar>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    paper: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n  }),\n)\n\nconst ParticipantTable: FunctionComponent<ParticipantTableProps> = ({\n  rows,\n  headCells,\n}: ParticipantTableProps) => {\n  const classes = useStyles()\n\n  const [order, setOrder] = React.useState<Order>('asc')\n  const [orderBy, setOrderBy] = React.useState<keyof typeof rows[0]>('calories')\n  const [selected, setSelected] = React.useState<string[]>([])\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof typeof rows[0],\n  ) => {\n    const isAsc = orderBy === property && order === 'asc'\n    setOrder(isAsc ? 'desc' : 'asc')\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map(n => n.id)\n      setSelected(newSelecteds)\n      return\n    }\n    setSelected([])\n  }\n\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n    const selectedIndex = selected.indexOf(name)\n    let newSelected: string[] = []\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name)\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1))\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1))\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      )\n    }\n\n    setSelected(newSelected)\n  }\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const isSelected = (name: string) => selected.indexOf(name) !== -1\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <ParticipantTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <ParticipantTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy.toString()}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n              rows={rows}\n              headCells={headCells}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.id.toString())\n                  const labelId = `enhanced-table-checkbox-${index}`\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={event => handleClick(event, row.id.toString())}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n\n                      {headCells.map((key, index) =>\n                        index === 0 ? (\n                          <TableCell\n                            component=\"th\"\n                            id={labelId}\n                            scope=\"row\"\n                            padding=\"none\"\n                            key={key.id}\n                          >\n                            {row[key.id]}\n                          </TableCell>\n                        ) : (\n                          <TableCell align=\"right\" key={key.id}>\n                            {row[key.id]}\n                          </TableCell>\n                        ),\n                      )}\n                    </TableRow>\n                  )\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  )\n}\n\nexport default ParticipantTable\n","/Users/lli/mtb/src/components/widgets/ObjectDebug.tsx",[],"/Users/lli/mtb/src/components/widgets/HideWhen.tsx",["480"],"import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport interface HideWhenProps {\n  hideWhen: boolean\n}\n\nconst HideWhen: React.FunctionComponent<HideWhenProps> = props => {\n  const classes = useStyles()\n  const children = React.Children.toArray(props.children)\n\n  if (children.length === 1) {\n    const visibility = props.hideWhen ? 'hidden' : 'visible'\n    const style = {\n      ...(children[0] as React.ReactElement<any>).props.style,\n      visibility,\n    }\n    console.log(style, 'style')\n\n    return React.cloneElement(children[0] as React.ReactElement<any>, {\n      style: style,\n    })\n  }\n\n  if (children.length === 2) {\n    return props.hideWhen\n      ? (children[1] as React.ReactElement<any>)\n      : (children[0] as React.ReactElement<any>)\n  }\n\n  return <></>\n}\n\nexport default HideWhen\n","/Users/lli/mtb/src/services/assessment.service.ts",["481","482","483"],"import { Response, Assessment } from '../types/types'\n\nimport { callEndpoint } from '../helpers/utility'\nimport constants from '../types/constants'\nimport { KEYS, MOCKS, setItem, getItem } from './lshelper'\n\nconst AssessmentService = {\n  getAssessments,\n  getAssessmentsWithResources,\n  getAssessmentsForSession,\n}\n\nasync function getAssessment(\n  guid: string,\n  token?: string,\n): Promise<Assessment[]> {\n  const result = token\n    ? await callEndpoint<Assessment>(\n        `${constants.endpoints.assessmentShared}${guid}/`,\n        'GET',\n        {},\n      )\n    : await callEndpoint<Assessment>(\n        `${constants.endpoints.assessment}${guid}/`,\n        'GET',\n        {},\n        token,\n      )\n\n  return [result.data]\n}\n\nasync function getAssessments(token?: string): Promise<Assessment[]> {\n  const result = token\n    ? await callEndpoint<{ items: Assessment[] }>(\n        //constants.endpoints.assessments,\n        constants.endpoints.assessmentShared,\n        'GET',\n        {},\n        token,\n      )\n    : await callEndpoint<{ items: Assessment[] }>(\n        constants.endpoints.assessmentsShared,\n        'GET',\n        {},\n      )\n\n  return result.data.items\n}\n\nconst getResource = async (assessment: Assessment): Promise<Assessment> => {\n  const endPoint = constants.endpoints.assessmentsSharedResources.replace(\n    '{identifier}',\n    assessment.identifier,\n  )\n  const response = await callEndpoint<{ items: any[] }>(endPoint, 'GET', {})\n  return {\n    ...assessment,\n    resources: response.data.items,\n    duration: Math.ceil(Math.random() * 30),\n  }\n}\n\nasync function getAssessmentsWithResources(\n  guid?: string,\n  token?: string,\n): Promise<{ assessments: Assessment[]; tags: string[] }> {\n  const name = token ? 'AShared' : 'ANonShared'\n\n  const localStore = localStorage.getItem(name)\n  if (localStore) {\n    return Promise.resolve(JSON.parse(localStore))\n  }\n\n  const assessments = guid\n    ? await getAssessment(guid, token)\n    : await getAssessments(token)\n  const resourcePromises = assessments.map(async asmnt => getResource(asmnt))\n  return Promise.all(resourcePromises).then(items => {\n    const allTags = items.map(item => item.tags).flat()\n    const tags = allTags.reduce((acc, curr) => {\n      if (!acc[curr]) {\n        acc[curr] = 1\n      } else {\n        acc[curr] += 1\n      }\n\n      return acc\n    }, {} as any)\n\n    const result = { assessments: items, tags }\n    localStorage.setItem('AR', JSON.stringify(result))\n\n    return result\n  })\n}\n\nasync function getAssessmentsForSession(\n  sessionId: string,\n  token?: string,\n): Promise<Assessment[]> {\n  // aling to do when api is ready\n  /* const result =await callEndpoint<{ items: Assessment[] }>(\n    constants.endpoints.sessionAssessments.replace(\n      '{sessionGuid}',\n      sessionId),\n    'GET',\n    {},\n    token,\n  \n\n  return result*/\n  const sessionAssessments = await getItem<\n    { sessionId: string; assessments: Assessment[] }[]\n  >(KEYS.ASSESSMENTS)\n  if (!sessionAssessments) {\n    return []\n  }\n  return (\n    sessionAssessments.find(a => a.sessionId === sessionId)?.assessments || []\n  )\n}\n\nexport default AssessmentService\n","/Users/lli/mtb/src/components/assessments/AssessmentLibraryWrapper.tsx",[],"/Users/lli/mtb/src/components/assessments/AssessmentCard.tsx",["484"],"import { createStyles } from '@material-ui/core'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport React, { FunctionComponent } from 'react'\nimport validated from '../../assets/validated.svg'\nimport { Assessment } from '../../types/types'\nimport AssessmentImage from './AssessmentImage'\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      width: '300px',\n      height: '512px',\n      border: '1px solid gray',\n      padding: 0,\n\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    dragging: {\n      width: '250px !important',\n      height: '250px !important',\n    },\n\n    title: {\n      fontSize: 14,\n    },\n    content: {\n      flexGrow: 1,\n    },\n\n    tags: {\n      alignSelf: 'flex-end',\n      backgroundColor: '#ccc',\n      padding: '5px',\n    },\n    bottom: {\n      marginTop: 'auto',\n      display: 'flex',\n\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n  }),\n)\n\ntype AssessmentCardOwnProps = {\n  assessment: Assessment\n  index: number\n}\n\ntype AssessmentCardProps = AssessmentCardOwnProps\n\nconst AssessmentCard: FunctionComponent<AssessmentCardProps> = ({\n  assessment,\n\n  index,\n}) => {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <AssessmentImage resources={assessment.resources} name={assessment.title}>\n        <Typography variant=\"subtitle2\" className={classes.tags}>\n          {assessment.tags.join(', ')}\n        </Typography>\n      </AssessmentImage>\n      <CardContent className={classes.content}>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {assessment.title}\n        </Typography>\n\n        <Typography className={classes.title} color=\"textSecondary\">\n          {assessment.summary}\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.bottom}>\n        <div>{assessment.duration} </div>\n        <img src={validated} />\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default AssessmentCard\n","/Users/lli/mtb/src/components/assessments/AssessmentImage.tsx",[],"/Users/lli/mtb/src/components/widgets/BreadCrumb.tsx",["485"],"import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Link from '@material-ui/core/Link'\nimport BackIcon from '@material-ui/icons/KeyboardBackspace'\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs/Breadcrumbs'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport interface BreadCrumbProps {\n  links: { url: string; text: string }[]\n  currentItem?: string\n}\n\nconst BreadCrumb: React.FunctionComponent<BreadCrumbProps> = ({\n  links,\n  currentItem = '',\n}: BreadCrumbProps) => {\n  const classes = useStyles()\n  return (\n    <Breadcrumbs aria-label=\"breadcrumb\">\n      {links.map((link, index) => (\n        <Link\n          color=\"inherit\"\n          href={link.url}\n          key={link.url}\n          style={{ display: 'flex' }}\n        >\n          {index === 0 && <BackIcon />}\n          {link.text}\n        </Link>\n      ))}\n\n      <Typography color=\"textPrimary\">{currentItem}</Typography>\n    </Breadcrumbs>\n  )\n}\n\nexport default BreadCrumb\n","/Users/lli/mtb/src/components/studies/sections.ts",[],"/Users/lli/mtb/src/components/studies/session-creator/sessionActions.ts",[],"/Users/lli/mtb/src/components/studies/scheduler/scheduleActions.ts",[],"/Users/lli/mtb/src/types/scheduling.ts",[],"/Users/lli/mtb/src/components/studies/session-creator/SingleSessionContainer.tsx",[],"/Users/lli/mtb/src/components/studies/session-creator/AssessmentSelector.tsx",["486","487"],"import { makeStyles } from '@material-ui/core'\nimport CheckIcon from '@material-ui/icons/Check'\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab'\nimport React, { FunctionComponent, useState } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useAsync } from '../../../helpers/AsyncHook'\nimport { useUserSessionDataState } from '../../../helpers/AuthContext'\nimport AssessmentService from '../../../services/assessment.service'\nimport { StudySession } from '../../../types/scheduling'\nimport {\n  Assessment,\n  StringDictionary\n} from '../../../types/types'\nimport AssessmentCard from '../../assessments/AssessmentCard'\nimport AssessmentLibraryWrapper from '../../assessments/AssessmentLibraryWrapper'\n\nconst useStyles = makeStyles({\n  toggleA: {\n    position: 'relative',\n    border: 'none',\n    padding: '0',\n  },\n  toggleADisabled: {\n    border: 'none',\n    opacity: '.3',\n  },\n  toggleASelected: {\n    border: '2px solid #ccc',\n    opacity: 0.8,\n\n    '& $overlay': {\n      opacity: 1,\n    },\n    '& $overlayBackdrop': {\n      opacity: 0.8,\n    },\n  },\n\n  overlay: {\n    position: 'absolute',\n    bottom: '0',\n\n    //background: 'rgba(0, 0, 0, 0.5)', /* Black see-through */\n\n    width: '100%',\n    transition: '.5s ease',\n    height: '100%',\n    opacity: '0',\n    color: 'white',\n    display: 'flex', // make us of Flexbox\n    alignItems: 'center', // does vertically center the desired content\n    justifyContent: 'center', // horizontally centers single line items\n    textClign: 'center', // optional, but helps horizontally center text that breaks into multiple lines\n\n    padding: '20px',\n  },\n  overlayBackdrop: {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    backgroundColor: '#fff',\n  },\n  overlayBg: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    border: '10px solid #333',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  check: {\n    position: 'absolute',\n    fontSize: '8rem',\n    color: '#333',\n  },\n})\n\ntype AssessmentSelectorProps = {\n  //active: {group: Group, session: StudySession | undefined}\n  activeSession: StudySession | undefined\n  onUpdateAssessments: Function\n  selectedAssessments: Assessment[]\n}\n\nconst AssessmentSelector: FunctionComponent<AssessmentSelectorProps> = ({\n  activeSession,\n  selectedAssessments,\n  onUpdateAssessments,\n}: AssessmentSelectorProps) => {\n  const { token } = useUserSessionDataState()\n\n  const handleError = useErrorHandler()\n  const classes = useStyles()\n\n  const [filteredAssessments, setFilteredAssessments] = useState<\n    Assessment[] | undefined\n  >(undefined)\n\n  const { data, status, error, run, setData } = useAsync<{\n    assessments: Assessment[]\n    tags: StringDictionary<number>\n  }>({\n    status: 'PENDING',\n    data: null,\n  })\n\n  React.useEffect(() => {\n    ///your async call\n    return run(AssessmentService.getAssessmentsWithResources(undefined, token))\n  }, [run])\n  if (status === 'PENDING') {\n    return <>loading component here</>\n  }\n  if (status === 'REJECTED') {\n    handleError(error!)\n  }\n\n  if (!data?.assessments || (!data?.tags && status === 'RESOLVED')) {\n    return <>No Data </>\n  }\n\n  const isAssessmentInSession = (\n    session: StudySession,\n    assessmentId: string,\n  ): boolean =>\n    session.assessments.find(item => item.guid === assessmentId) !== undefined\n\n  const toggleAssessment = (\n    event: React.MouseEvent<HTMLElement>,\n    selectedAssessments: Assessment[],\n  ) => {\n    onUpdateAssessments(selectedAssessments)\n  }\n\n  return (\n    <div>\n      <AssessmentLibraryWrapper\n        tags={data.tags}\n        assessments={data.assessments}\n        onChangeTags={\n          (assessments: Assessment[]) =>\n            setFilteredAssessments(assessments) /*setFilterTags(tags)*/\n        }\n      >\n        {(filteredAssessments || data.assessments).map((a, index) => (\n          <ToggleButtonGroup\n            value={selectedAssessments}\n            onChange={toggleAssessment}\n            aria-label={a.title}\n            key={a.guid}\n          >\n            <ToggleButton\n              aria-label=\"bold\"\n              value={a}\n              disabled={\n                !activeSession || isAssessmentInSession(activeSession, a.guid)\n              }\n              classes={{\n                root: classes.toggleA,\n                selected: classes.toggleASelected,\n                disabled: classes.toggleADisabled,\n              }}\n            >\n              <AssessmentCard\n                index={index}\n                assessment={a}\n                key={a.guid}\n              ></AssessmentCard>\n              <div className={classes.overlay}>\n                <div className={classes.overlayBackdrop}></div>\n                <div className={classes.overlayBg}>\n                  <CheckIcon className={classes.check}></CheckIcon>\n                </div>\n              </div>\n            </ToggleButton>\n          </ToggleButtonGroup>\n        ))}\n      </AssessmentLibraryWrapper>\n    </div>\n  )\n}\n\nexport default AssessmentSelector\n","/Users/lli/mtb/src/components/studies/session-creator/SessionActionButtons.tsx",["488"],"import { Box, Button, makeStyles, MenuItem, Select } from '@material-ui/core'\nimport React, { FunctionComponent, useEffect } from 'react'\nimport { StudySession } from '../../../types/scheduling'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexShrink: 0,\n    paddingTop: theme.spacing(2),\n  },\n  label: {\n    fontSize: 18,\n    textTransform: 'uppercase',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    whiteSpace: 'nowrap',\n  },\n  selectEmpty: {\n    marginTop: 0,\n\n    marginRight: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    padding: 0,\n  },\n}))\n\ntype SessionActionButtonsProps = {\n  onAddSession: Function\n  sessions: StudySession[]\n}\n\nconst SessionActionButtons: FunctionComponent<SessionActionButtonsProps> = ({\n  onAddSession,\n  sessions,\n}: SessionActionButtonsProps) => {\n  const classes = useStyles()\n  const [selectedSessionId, setSelectedSessionId] = React.useState<\n    string | undefined\n  >(sessions.length > 0 ? sessions[0].id : undefined)\n\n  useEffect(() => {\n    setSelectedSessionId(sessions.length > 0 ? sessions[0].id : undefined)\n  }, [sessions.length])\n\n  const duplicateSession = (selectedId?: string) => {\n    const session = sessions.find(s => s.id === selectedId)\n    if (!selectedId || !session || session.assessments.length === 0) {\n      onAddSession(sessions, [])\n    } else {\n      onAddSession(sessions, [...session.assessments])\n    }\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Button\n        key=\"add_session\"\n        variant=\"contained\"\n        color=\"secondary\"\n        style={{ marginRight: '16px' }}\n        onClick={() => onAddSession(sessions, [])}\n      >\n        Create new session\n      </Button>\n\n      {selectedSessionId && <>\n        <Select\n        key='session_select'\n        value={selectedSessionId}\n        onChange={e => setSelectedSessionId(e.target.value as string)}\n        displayEmpty\n        className={classes.selectEmpty}\n        inputProps={{ 'aria-label': 'Without label' }}\n      >\n        {sessions.map((session, index) => (\n          <MenuItem value={session.id} key={`${session.id}menu${index}`}>\n            {session.name}\n          </MenuItem>\n        ))}\n      </Select>,\n        <Button\n          key=\"duplicate_session\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => duplicateSession(selectedSessionId)}\n        >\n          Duplicate\n        </Button>,\n     </>}\n    </Box>\n  )\n}\n\nexport default SessionActionButtons\n","/Users/lli/mtb/src/components/studies/scheduler/IntroInfo.tsx",[],"/Users/lli/mtb/src/components/studies/scheduler/StudyStartDate.tsx",["489"],"import {\n  Box,\n  createStyles,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Theme\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { StartEventId } from '../../../types/scheduling'\nimport SchedulingFormSection from './SchedulingFormSection'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({}))\n\nexport interface StudyStartDateProps {\n  isIntro?: boolean\n  startEventId?: StartEventId\n  onChange: (n: StartEventId) => void\n  style?: React.CSSProperties\n}\n\nconst StudyStartDate: React.FunctionComponent<StudyStartDateProps> = ({\n  startEventId,\n  onChange,\n  isIntro,\n  style,\n}: StudyStartDateProps) => {\n  const classes = useStyles()\n  const options: StartEventId[] = ['ONBOARDING', 'START_DATE']\n\n  const label = isIntro ? (\n    <Box marginTop=\"20px\">\n      <strong>How would you define Day 1 of your study ?</strong>\n      <br /> <br />\n      Day 1: official start date of when participant will begin remote\n      assessments.{' '}\n    </Box>\n  ) : (\n    'Define Day 1 of the study'\n  )\n\n  return (\n    <SchedulingFormSection\n      label={label}\n      border={false}\n      style={{ ...style, marginLeft: '324px' }}\n    >\n      <RadioGroup\n        aria-label=\"Day 1\"\n        name=\"day1\"\n        value={startEventId}\n        onChange={e => onChange(e.target.value as StartEventId)}\n      >\n        <FormControlLabel\n          value={options[0]}\n          control={<Radio />}\n          label=\"Right after completion of onboarding session\"\n        />\n\n        <FormControlLabel\n          value={options[1]}\n          control={<Radio />}\n          label=\"Start Date (usually clinic visit) to be defined in Participant Manager\"\n        />\n      </RadioGroup>\n    </SchedulingFormSection>\n  )\n}\n\nexport default StudyStartDate\n","/Users/lli/mtb/src/components/studies/scheduler/Duration.tsx",["490","491","492"],"import { createStyles, StandardTextFieldProps, Theme } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport moment from 'moment'\nimport React from 'react'\nimport SelectWithEnum from '../../widgets/SelectWithEnum'\nimport SmallTextBox from '../../widgets/SmallTextBox'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({}))\n\nexport interface DurationProps {\n  onChange: Function\n\n  durationString: string | undefined\n  unitData: any\n  unitLabel: string\n  numberLabel: string\n}\n\nconst Duration: React.FunctionComponent<\n  DurationProps & StandardTextFieldProps\n> = ({\n  durationString,\n  unitData,\n  onChange,\n  unitLabel,\n  numberLabel,\n  ...props\n}: DurationProps) => {\n  const classes = useStyles()\n\n  /* const units: { [key: string]: moment.unitOfTime.Base } = {\n    Y: 'y',\n    M: 'M',\n    W: 'w',\n    D: 'd',\n    H: 'h',\n    TM: 'm',\n    S: 's',\n  }*/\n\n  const [unt, setUnit] = React.useState<string | undefined>(undefined)\n  const [num, setNum] = React.useState<number | undefined>(undefined)\n\n  React.useEffect(() => {\n    try {\n      if (!durationString /*|| !durationString.includes('P')*/) {\n        throw durationString + 'no value!'\n      }\n      //console.log('duration', durationString)\n      const hasTime = durationString.includes('T')\n      //console.log(hasTime)\n      let unit = durationString[durationString.length - 1]\n      //unit = unit === 'M' && hasTime ? 'TM' : unit\n      //console.log('unit is', unit)\n      //console.log('unitdata', unitData)\n      //console.log(durationString, ':about to parse')\n      //debugger\n\n      // const parsedDuration = moment.duration(durationString)\n      //console.log('parsedD', parsedDuration)\n      var numberPattern = /\\d+/g\n      const num = durationString.match(numberPattern)\n      const n = num ? Number(num[0]) : 0\n\n      //const n = durationString.//parsedDuration.as(units[unit] as moment.unitOfTime.Base)\n\n      //console.log('unittype:', typeof unit)\n      //console.log('n', n)\n\n      setUnit(unit)\n      setNum(n)\n    } catch (e) {\n      console.log(e + 'caught error')\n      setUnit(undefined)\n      setNum(undefined)\n    }\n  }, [durationString])\n\n  const changeValue = (value?: number, unit?: string) => {\n    //console.log('changing value:' + value)\n    if (unit) {\n      //console.log('has unit: ' + unit)\n      setUnit(unit)\n    }\n    if (value) {\n      //console.log('has value: ' + value)\n      setNum(value)\n    }\n    if (!unit || !value) {\n      return\n    }\n    //dont' use that since it will change the units\n    //const convertedDuraion = moment.duration({ [unit]: value }).toISOString()\n    //compose a perdio\n    // const durationUnit = Object.keys(units).find(key => units[key] === unit)!\n    const time = unit === 'H' || unit === 'M' ? 'T' : ''\n    const p = `P${time}${value}${unit}`\n    //console.log(p, 'set p')\n\n    onChange(p)\n  }\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <SmallTextBox\n        value={num || ''}\n        aria-label={numberLabel}\n        type=\"number\"\n        {...props}\n        id={numberLabel.replace(' ', '')}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          changeValue(Number(e.target.value as string), unt)\n        }}\n      ></SmallTextBox>\n\n      <SelectWithEnum\n        aria-label={unitLabel}\n        {...props}\n        value={unt}\n        sourceData={unitData}\n        id={unitLabel.replace(' ', '')}\n        onChange={e =>\n          changeValue(num, e.target.value as moment.unitOfTime.Base)\n        }\n      ></SelectWithEnum>\n    </div>\n  )\n}\n\nexport default Duration\n","/Users/lli/mtb/src/components/studies/scheduler/TimelinePlot.tsx",["493","494"],"import { Box, createStyles, Theme } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({}))\n\nexport interface TimelinePlotProps {}\n\nconst TimelinePlot: React.FunctionComponent<TimelinePlotProps> = ({}: TimelinePlotProps) => {\n  const classes = useStyles()\n\n  return (\n    <Box border=\"1px solid black\" padding=\"30px\" bgcolor=\"#ECECEC\">\n      This timeline viewer will update to provide a visual summary of the\n      schedules you’ve defined below for each session.\n    </Box>\n  )\n}\n\nexport default TimelinePlot\n","/Users/lli/mtb/src/components/studies/launch/LaunchStepper.tsx",["495","496","497"],"import React from 'react'\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  withStyles,\n} from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Check from '@material-ui/icons/Check'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\nimport StepConnector from '@material-ui/core/StepConnector'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { StepIconProps } from '@material-ui/core/StepIcon'\nimport { StepButton } from '@material-ui/core'\n\nconst ColorlibConnector = withStyles({\n  alternativeLabel: {\n    top: 22,\n  },\n  active: {\n    '& $line': {\n      /*backgroundImage:\n        'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',*/\n      backgroundColor: '#FFE500',\n    },\n  },\n  completed: {\n    '& $line': {\n      /*\n      backgroundImage:\n        'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',*/\n      backgroundColor: '#FFE500',\n    },\n  },\n  line: {\n    height: 3,\n    border: 0,\n    backgroundColor: '#eaeaf0',\n    borderRadius: 1,\n  },\n})(StepConnector)\n\nconst useColorlibStepIconStyles = makeStyles({\n  root: {\n    backgroundColor: '#ccc',\n    zIndex: 1,\n    color: '#fff',\n    width: 50,\n    height: 50,\n    display: 'flex',\n    borderRadius: '50%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  active: {\n    backgroundColor: '#FFE500',\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n\n    /*backgroundImage:\n      'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',*/\n  },\n  completed: {\n    /*\n    backgroundImage:\n      'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n  */\n    backgroundColor: '#FFE500',\n  },\n})\n\nfunction ColorlibStepIcon(props: StepIconProps) {\n  const classes = useColorlibStepIconStyles()\n  const { active, completed } = props\n  console.log(props)\n\n  const icons: { [index: string]: React.ReactElement } = {\n    1: <SettingsIcon />,\n    2: <GroupAddIcon />,\n    3: <VideoLabelIcon />,\n  }\n\n  return (\n    <div\n      className={clsx(classes.root, {\n        [classes.active]: active,\n        [classes.completed]: completed,\n      })}\n    >\n      {icons[String(props.icon)]}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n  }),\n)\n\ntype LaunchStepperProps = {\n  activeStep: number\n  setActiveStepFn: Function\n  steps: { label: string; isComplete?: boolean }[]\n}\n\nconst LaunchStepper: React.FunctionComponent<LaunchStepperProps> = ({\n  activeStep,\n  setActiveStepFn,\n  steps,\n}: LaunchStepperProps) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        alternativeLabel\n        activeStep={activeStep}\n        connector={<ColorlibConnector />}\n      >\n        {steps.map((step, index) => (\n          <Step key={step.label}>\n            <StepButton\n              onClick={() => setActiveStepFn(index)}\n              completed={step.isComplete}\n              disabled={!step.isComplete}\n            >\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\n                {step.label}\n              </StepLabel>\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default LaunchStepper\n","/Users/lli/mtb/src/components/studies/scheduler/SchedulableSingleSessionContainer.tsx",["498"],"import {\n  Box,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  makeStyles,\n  TextField\n} from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport clsx from 'clsx'\nimport React, { FunctionComponent } from 'react'\nimport { ErrorBoundary } from 'react-error-boundary'\nimport { ThemeType } from '../../../style/theme'\nimport {\n  AssessmentWindow as AssessmentWindowType,\n  EndDate as EndDateType,\n  NotificationFreqEnum,\n  NotificationReminder,\n  Reoccurance as ReoccuranceType,\n  SessionSchedule,\n  StartDate as StartDateType,\n  StudySession\n} from '../../../types/scheduling'\nimport { ErrorFallback, ErrorHandler } from '../../widgets/ErrorHandler'\nimport SelectWithEnum from '../../widgets/SelectWithEnum'\nimport AssessmentList from './AssessmentList'\nimport AssessmentWindow from './AssessmentWindow'\nimport EndDate from './EndDate'\nimport ReminderNotification from './ReminderNotification'\nimport RepeatFrequency from './RepeatFrequency'\nimport SchedulingFormSection from './SchedulingFormSection'\nimport StartDate from './StartDate'\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {\n    // padding: '12px',\n    // border: '1px solid #C4C4C4',\n    /* '&.active': {\n      border: theme.activeBorder,\n    },*/\n    marginBottom: theme.spacing(2),\n  },\n  assessments: {\n    width: '286px',\n    flexGrow: 0,\n    flexShrink: 0,\n    backgroundColor: '#BCD5E4',\n    padding: theme.spacing(1),\n  },\n\n  formSection: {\n    // backgroundColor: '#acacac',\n    padding: `${theme.spacing(3)}px  ${theme.spacing(4)}px 0px ${theme.spacing(\n      4,\n    )}px`,\n    textAlign: 'left',\n    // marginBottom: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n\n  smallRadio: {\n    padding: '2px 9px',\n    marginTop: '2px',\n  },\n}))\n\ntype SchedulableSingleSessionContainerProps = {\n  studySession: StudySession\n  onUpdateSessionSchedule: Function\n  onSaveSessionSchedule: Function\n\n  //onSetActiveSession: Function\n}\n\nconst SchedulableSingleSessionContainer: FunctionComponent<SchedulableSingleSessionContainerProps> = ({\n  studySession,\n  onUpdateSessionSchedule,\n  onSaveSessionSchedule,\n}: // onSetActiveSession,\nSchedulableSingleSessionContainerProps) => {\n  const classes = useStyles()\n\n  const defaultSchedule: SessionSchedule = {\n    startDate: {\n      type: 'DAY1',\n    },\n    reoccurance: '', //'P1D', //{ unit: 'd', frequency: 1 },\n    windows: [],\n    endDate: {\n      type: 'END_STUDY',\n    },\n    isGroupAssessments: false,\n    order: 'SEQUENTIAL',\n  }\n  const [\n    schedulableSession,\n    setSchedulableSession,\n  ] = React.useState<SessionSchedule>(\n    studySession.sessionSchedule || defaultSchedule,\n  )\n\n  React.useEffect(() => {\n    setSchedulableSession(studySession.sessionSchedule || defaultSchedule)\n  }, [studySession.sessionSchedule])\n\n  const updateSessionSchedule = (newSession: SessionSchedule) => {\n    onUpdateSessionSchedule(newSession)\n  }\n\n  const addNewWindow = () => {\n    const newState = { ...schedulableSession }\n    newState.windows.push({\n      startHour: 5,\n      end: 'P17D',\n    })\n\n    console.log(newState, 'adding window')\n\n    updateSessionSchedule(newState)\n  }\n\n  const deleteWindow = (index: number) => {\n    const windows = [...schedulableSession.windows]\n    windows.splice(index, 1)\n    const newState = {\n      ...schedulableSession,\n      windows: [...windows],\n    }\n    updateSessionSchedule(newState)\n  }\n\n  const updateWindow = (window: AssessmentWindowType, index: number) => {\n    const newState = {\n      ...schedulableSession,\n      windows: schedulableSession.windows.map((item, i) =>\n        i === index ? window : item,\n      ),\n    }\n    updateSessionSchedule(newState)\n  }\n\n  return (\n    <Box\n      className={clsx(classes.root, studySession?.active && 'active')}\n      onClick={() => {} /*onSetActiveSession(studySession.id)*/}\n    >\n      <form noValidate autoComplete=\"off\">\n        <ErrorBoundary FallbackComponent={ErrorFallback} onError={ErrorHandler}>\n          <Box display=\"flex\">\n            <Box className={classes.assessments}>\n              <AssessmentList\n                studySession={studySession}\n                onSetRandomized={(isRandomized: boolean) => {\n                  updateSessionSchedule({\n                    ...schedulableSession,\n                    order: isRandomized ? 'RANDOM' : 'SEQUENTIAL',\n                  })\n                }}\n                onChangeGrouping={(isGroupAssessments: boolean) => {\n                  updateSessionSchedule({\n                    ...schedulableSession,\n                    isGroupAssessments,\n                  })\n                }}\n                isGroupAssessments={\n                  schedulableSession.isGroupAssessments || false\n                }\n                assessmentOrder={schedulableSession.order}\n              />\n            </Box>\n\n            <Box bgcolor=\"#F8F8F8\" flexGrow=\"1\">\n              <Box className={classes.formSection}>\n                <StartDate\n                  startDate={schedulableSession.startDate}\n                  onChange={(startDate: StartDateType) => {\n                    updateSessionSchedule({ ...schedulableSession, startDate })\n                    //setSchedulableSession(prev => ({ ...prev, startDate }))\n                  }}\n                ></StartDate>\n              </Box>\n              <Box className={classes.formSection}>\n                <EndDate\n                  endDate={schedulableSession.endDate}\n                  onChange={(endDate: EndDateType) =>\n                    updateSessionSchedule({ ...schedulableSession, endDate })\n                  }\n                ></EndDate>\n              </Box>\n              <Box className={classes.formSection}>\n                <RepeatFrequency\n                  onChange={(repeatFrequency: ReoccuranceType) => {\n                    updateSessionSchedule({\n                      ...schedulableSession,\n                      reoccurance: repeatFrequency,\n                    })\n                  }}\n                  repeatFrequency={schedulableSession.reoccurance}\n                ></RepeatFrequency>\n              </Box>\n\n              <Box className={classes.formSection}>\n                <SchedulingFormSection label={'Session Window:'}>\n                  <Box>\n                    {schedulableSession.windows.map((window, index) => (\n                      <AssessmentWindow\n                        index={index}\n                        key={`${index}${window.startHour}${window.end}`}\n                        onDelete={() => {\n                          console.log('deleting1', index)\n                          deleteWindow(index)\n                        }}\n                        onChange={(window: AssessmentWindowType) =>\n                          updateWindow(window, index)\n                        }\n                        window={window}\n                      ></AssessmentWindow>\n                    ))}\n                    <Button onClick={addNewWindow} variant=\"contained\">\n                      +Add new window\n                    </Button>\n                  </Box>\n                </SchedulingFormSection>\n                <SchedulingFormSection label={'Session Notifications'}>\n                  <Box>\n                    <SchedulingFormSection\n                      label={'Notify Participant'}\n                      variant=\"small\"\n                      border={false}\n                    >\n                      <SelectWithEnum\n                        value={schedulableSession.notification || 'RANDOM'}\n                        style={{ marginLeft: 0 }}\n                        sourceData={NotificationFreqEnum}\n                        id=\"notificationfreq\"\n                        onChange={e => {\n                          const n = e.target\n                            .value! as keyof typeof NotificationFreqEnum\n                          updateSessionSchedule({\n                            ...schedulableSession,\n                            notification: n,\n                          })\n                        }}\n                      ></SelectWithEnum>\n                    </SchedulingFormSection>\n                    <ReminderNotification\n                      reminder={schedulableSession.reminder}\n                      onChange={(reminder: NotificationReminder) =>\n                        updateSessionSchedule({\n                          ...schedulableSession,\n                          reminder,\n                        })\n                      }\n                    ></ReminderNotification>\n                    <SchedulingFormSection\n                      label={''}\n                      variant=\"small\"\n                      border={false}\n                    >\n                      <FormControlLabel\n                        style={{ display: 'block' }}\n                        control={\n                          <Checkbox\n                            value={schedulableSession.isAllowSnooze}\n                            onChange={e =>\n                              updateSessionSchedule({\n                                ...schedulableSession,\n                                isAllowSnooze: e.target.checked,\n                              })\n                            }\n                          />\n                        }\n                        label=\"Allow participant to snooze\"\n                      />\n                    </SchedulingFormSection>\n                    <SchedulingFormSection\n                      label={'Subject line:'}\n                      variant=\"small\"\n                      border={false}\n                    >\n                      <TextField color=\"secondary\" multiline={false} fullWidth={true} variant=\"outlined\"></TextField>\n                    </SchedulingFormSection>\n\n                    <SchedulingFormSection\n                      label={'Body text(40 character limit)'}\n                      variant=\"small\"\n                      border={false}\n                    >\n                      <TextField color=\"secondary\" multiline={true}  fullWidth={true}  variant=\"outlined\"></TextField>\n                    </SchedulingFormSection>\n\n      \n                  </Box>\n                </SchedulingFormSection>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"small\"\n                  style={{ marginBottom: '16px' }}\n                  onClick={() => onSaveSessionSchedule()}\n                  startIcon={<SaveIcon />}\n                >\n                  Save Changes\n                </Button>\n              </Box>\n            </Box>\n          </Box>\n        </ErrorBoundary>\n      </form>\n    </Box>\n  )\n}\n\nexport default SchedulableSingleSessionContainer\n","/Users/lli/mtb/src/components/assessments/AssessmentLibraryFilter.tsx",["499"],"import {\n  Checkbox,\n  FormControlLabel,\n  makeStyles,\n  Paper,\n} from '@material-ui/core'\nimport React, { FunctionComponent } from 'react'\nimport { Assessment, StringDictionary } from '../../types/types'\n\ntype AssessmentLibraryFilterProps = {\n  assessments: Assessment[]\n  tags: StringDictionary<number>\n  //selectedTags: string[]\n  // onChangeDuration: Function\n  onChangeTags: Function\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(5),\n  },\n}))\n\nconst AssessmentLibraryFilter: FunctionComponent<AssessmentLibraryFilterProps> = ({\n  assessments,\n  tags,\n  onChangeTags,\n}: //selectedTags\nAssessmentLibraryFilterProps) => {\n  const classes = useStyles()\n\n  const getTotalCount = (tags: object): number =>\n    Object.values(tags).reduce((a, c) => a + c, 0)\n\n  const getAssessmentDurations = (): number[] =>\n    assessments.map(a => a.duration || 0)\n  const [selectedTags, setSelectedTags] = React.useState<string[]>([])\n\n  const hasAnyTags = (assessment: Assessment, tags: string[]) => {\n    const intersection = assessment.tags.filter(tag => tags.includes(tag))\n    return intersection.length > 0\n  }\n\n  const getFilteredAssessments = (\n    assessments: Assessment[],\n    tags: string[],\n  ) => {\n    if (!tags.length) {\n      return assessments\n    } else {\n      return assessments.filter(a => hasAnyTags(a, tags))\n    }\n  }\n\n  const changeTags = (isChecked: boolean, tag: string) => {\n    const result = isChecked\n      ? [...selectedTags, tag]\n      : selectedTags.filter(item => item !== tag)\n    setSelectedTags(result)\n    onChangeTags(getFilteredAssessments(assessments, result))\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <FormControlLabel\n        key=\"allConstructs\"\n        control={\n          <Checkbox\n            checked={selectedTags.length === 0}\n            onChange={event => {\n              if (event.target.checked) {\n                setSelectedTags([])\n                onChangeTags(getFilteredAssessments(assessments, []))\n              }\n            }}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label={`All Construct Domains (${getTotalCount(tags)})`}\n      />\n      {Object.keys(tags).map(tag => (\n        <FormControlLabel\n          key={tag}\n          control={\n            <Checkbox\n              checked={selectedTags.indexOf(tag) !== -1}\n              onChange={event => changeTags(event.target.checked, tag)}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          //@ts-ignore\n          label={`${tag} (${tags[tag]})`}\n        />\n      ))}\n    </Paper>\n  )\n}\n\nexport default AssessmentLibraryFilter\n","/Users/lli/mtb/src/components/widgets/SessionIcon.tsx",[],"/Users/lli/mtb/src/components/assessments/AssessmentSmall.tsx",[],"/Users/lli/mtb/src/components/widgets/EditableTextbox.tsx",["500"],"import { makeStyles } from '@material-ui/core'\nimport React, { useState, useEffect, FunctionComponent, useRef } from 'react'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    marginRight: theme.spacing(2),\n\n    borderRadius: '5px',\n\n    '&:hover': {\n      border: `1px solid ${theme.palette.divider}`,\n      padding: '8px',\n    },\n  },\n}))\n\ntype EditableProps = {\n  text: string\n  type: string\n  placeholder: string\n  component?: React.ElementType\n  children: React.ReactNode\n  childRef: React.MutableRefObject<any>\n  onReset: Function\n  onTriggerUpdate: Function\n}\n\nexport const Editable: FunctionComponent<EditableProps> = ({\n  text,\n  type,\n  placeholder,\n  children,\n  childRef,\n  onReset,\n  onTriggerUpdate,\n  component: WrapperElement = 'span',\n  ...props\n}) => {\n  const [isEditing, setEditing] = useState(false)\n  const classes = useStyles()\n\n  useEffect(() => {\n    if (childRef && childRef.current && isEditing === true) {\n      childRef.current.focus()\n    }\n  }, [isEditing, childRef])\n\n  const handleKeyDown = (event: React.KeyboardEvent, type: string) => {\n    const { key } = event\n    const keys = ['Escape', 'Tab']\n    const enterKey = 'Enter'\n    const allKeys = [...keys, enterKey]\n    if (key === 'Escape') {\n      onReset()\n    }\n    if (key === 'Tab' || key === enterKey) {\n      onTriggerUpdate()\n    }\n    if (\n      (type === 'textarea' && keys.indexOf(key) > -1) ||\n      (type !== 'textarea' && allKeys.indexOf(key) > -1)\n    ) {\n      setEditing(false)\n    }\n  }\n\n  return (\n    <section {...props}>\n      {isEditing ? (\n        <div\n          onBlur={() => setEditing(false)}\n          onKeyDown={e => handleKeyDown(e, type)}\n        >\n          {children}\n        </div>\n      ) : (\n        <div className={classes.wrapper} onClick={() => setEditing(true)}>\n          <WrapperElement style={{ margin: 0 }}>\n            {text || placeholder || ' '}\n          </WrapperElement>\n        </div>\n      )}\n    </section>\n  )\n}\n\ntype EditableTextboxProps = {\n  initValue: string\n  onTriggerUpdate: Function\n  component?: React.ElementType\n}\n\nconst EditableTextbox: FunctionComponent<EditableTextboxProps> = ({\n  initValue,\n  onTriggerUpdate,\n  ...rest\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const [newValue, setNewValue] = React.useState('')\n\n  return (\n    <Editable\n      text={newValue}\n      placeholder={initValue}\n      childRef={inputRef}\n      onReset={() => setNewValue(initValue)}\n      onTriggerUpdate={() => onTriggerUpdate(newValue)}\n      type=\"input\"\n      {...rest}\n    >\n      <input\n        ref={inputRef}\n        type=\"text\"\n        name=\"task\"\n        placeholder={initValue}\n        value={newValue}\n        style={{ width: '100%', padding: '8px' }}\n        onBlur={e => {\n          if (newValue) {\n            onTriggerUpdate(newValue)\n          }\n        }}\n        onChange={e => {\n          setNewValue(e.target.value)\n        }}\n      />\n    </Editable>\n  )\n}\n\nexport default EditableTextbox\n","/Users/lli/mtb/src/components/studies/scheduler/SchedulingFormSection.tsx",[],"/Users/lli/mtb/src/components/widgets/SelectWithEnum.tsx",[],"/Users/lli/mtb/src/components/widgets/SmallTextBox.tsx",[],"/Users/lli/mtb/src/components/studies/scheduler/AssessmentWindow.tsx",["501"],"import {\n  Box,\n  Checkbox,\n  createStyles,\n  FormControlLabel,\n  IconButton,\n  Paper,\n  Theme,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DeleteIcon from '@material-ui/icons/Close'\nimport React from 'react'\nimport {\n  AssessmentWindow as AssessmentWindowType,\n  HSsEnum,\n} from '../../../types/scheduling'\nimport { StringDictionary } from '../../../types/types'\nimport SelectWithEnum from '../../widgets/SelectWithEnum'\nimport Duration from './Duration'\nimport SchedulingFormSection from './SchedulingFormSection'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    smallRadio: {\n      padding: '2px 9px',\n      marginTop: '2px',\n    },\n  }),\n)\n\nexport interface AssessmentWindowProps {\n  //use the following version instead if you need access to router props\n  //export interface AssessmentWindowProps  extends  RouteComponentProps {\n  //Enter your props here\n  window: AssessmentWindowType\n  index: number\n  onChange: Function\n  onDelete: Function\n}\n\nconst AssessmentWindow: React.FunctionComponent<AssessmentWindowProps> = ({\n  window,\n  onChange,\n  onDelete,\n  index,\n}: AssessmentWindowProps) => {\n  const classes = useStyles()\n\n  const getDropdownItems = (): StringDictionary<string> => {\n    const menuItems: StringDictionary<string> = {}\n\n    const formatTime = (hours: number) => {\n      var time = new Date(2000, 1, 1, hours)\n      return time.toLocaleString('en-US', { hour: 'numeric', hour12: true })\n    }\n    for (let i = 0; i < 24; i++) {\n      menuItems[i] = formatTime(i)\n    }\n    return menuItems\n  }\n\n  return (\n    <Paper\n      style={{\n        backgroundColor: '#bfd9e833',\n        paddingBottom: '16px',\n        marginBottom: '16px',\n      }}\n      elevation={2}\n    >\n      <Box position=\"relative\">\n        <Box\n          bgcolor=\"#BCD5E4\"\n          height=\"48px\"\n          textAlign=\"center\"\n          lineHeight=\"48px\"\n          width=\"48px\"\n        >\n          {index + 1}.\n        </Box>\n        <IconButton\n          style={{ position: 'absolute', top: '12px', right: '16px' }}\n          edge=\"end\"\n          size=\"small\"\n          onClick={() => onDelete()}\n        >\n          <DeleteIcon></DeleteIcon>\n        </IconButton>\n      </Box>\n      <SchedulingFormSection\n        label={'Start'}\n        variant=\"small\"\n        border={false}\n        style={{ padding: '0 16px' }}\n      >\n        <SelectWithEnum\n          value={window.startHour}\n          sourceData={getDropdownItems()}\n          id=\"from\"\n          onChange={e =>\n            onChange({\n              ...window,\n              startHour: e.target.value,\n            })\n          }\n        ></SelectWithEnum>\n      </SchedulingFormSection>\n\n      <SchedulingFormSection\n        label={'Expire after'}\n        variant=\"small\"\n        border={false}\n        style={{ padding: '0 16px' }}\n      >\n        <Box display=\"inline-flex\" alignItems=\"center\">\n          <Duration\n            onChange={e => {\n              onChange({\n                ...window,\n                end: e,\n              })\n            }}\n            durationString={window.end || '    '}\n            unitLabel=\"Repeat Every\"\n            numberLabel=\"frequency number\"\n            unitData={HSsEnum}\n          ></Duration>\n        </Box>\n      </SchedulingFormSection>\n      <SchedulingFormSection\n        label={''}\n        variant=\"small\"\n        border={false}\n        style={{ padding: '0 16px' }}\n      >\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={window.isAllowAnyFrequency}\n              onChange={e =>\n                onChange({\n                  ...window,\n                  isAllowAnyFrequency: e.target.checked,\n                })\n              }\n            />\n          }\n          label=\"Allow participant to complete this session as often as they like within the window\"\n        />\n      </SchedulingFormSection>\n    </Paper>\n  )\n}\n\nexport default AssessmentWindow\n","/Users/lli/mtb/src/components/studies/scheduler/AssessmentList.tsx",["502"],"import {\n  Box,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  makeStyles,\n  Switch,\n  Typography\n} from '@material-ui/core'\nimport ClockIcon from '@material-ui/icons/AccessTime'\nimport clsx from 'clsx'\nimport React from 'react'\nimport { ThemeType } from '../../../style/theme'\nimport { StudySession } from '../../../types/scheduling'\nimport { Assessment } from '../../../types/types'\nimport AssessmentSmall from '../../assessments/AssessmentSmall'\nimport SessionIcon from '../../widgets/SessionIcon'\n\nconst useStyles = makeStyles((theme: ThemeType) => ({\n  root: {\n    padding: '12px',\n    border: '1px solid #C4C4C4',\n\n    '&.active': {\n      border: theme.activeBorder,\n    },\n  },\n  inner: {\n    borderTop: '1px solid #000',\n    borderBottom: '1px solid #000',\n    paddingTop: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n}))\n\nexport interface AssessmentListProps {\n  //use the following version instead if you need access to router props\n  //export interface EndDateProps  extends  RouteComponentProps {\n  //Enter your props here\n  studySession: StudySession\n  isGroupAssessments: boolean\n  assessmentOrder: 'SEQUENTIAL' | 'RANDOM'\n  onChangeGrouping: Function\n  onSetRandomized: Function\n}\n\nexport interface SessionHeaderProps {\n  order: number\n  name: string\n  assessments: Assessment[]\n}\nconst SessionHeader: React.FunctionComponent<SessionHeaderProps> = ({\n  order,\n  name,\n  assessments,\n}: SessionHeaderProps) => {\n  const totalTime = assessments.reduce(\n    (prev, curr) => prev + Number(curr.duration),\n    0,\n  )\n  const result = (\n    <Box>\n      <SessionIcon index={order}>\n        <span>{name}</span>\n      </SessionIcon>\n      <Box textAlign=\"right\" paddingBottom=\"16px\">\n        {totalTime} min &nbsp;&nbsp;\n        <ClockIcon\n          style={{ fontSize: '12px', verticalAlign: 'middle' }}\n        ></ClockIcon>\n      </Box>\n    </Box>\n  )\n  return result\n}\n\nconst AssessmentList: React.FunctionComponent<AssessmentListProps> = ({\n  studySession,\n  assessmentOrder,\n  isGroupAssessments,\n  onChangeGrouping,\n  onSetRandomized,\n}: AssessmentListProps): JSX.Element => {\n  const classes = useStyles()\n\n  const getMargins = (\n    index: number,\n    assessmentsNumber: number,\n  ): React.CSSProperties => {\n    if (assessmentsNumber === 1) {\n      return {}\n    }\n    const mTop = `${index === 0 ? 0 : -65 * 1}px`\n    const mLeft = `${-10 * index + 50}px`\n    return { marginLeft: mLeft, marginTop: mTop }\n  }\n  return (\n    <>\n      <SessionHeader\n        order={studySession.order!}\n        name={studySession.name}\n        assessments={studySession.assessments}\n      ></SessionHeader>\n\n      <div\n        className={clsx({\n          [classes.inner]: true,\n        })}\n      >\n        {studySession.assessments.map((assessment, index) => (\n          <Box\n            key={assessment.guid}\n            style={\n              assessmentOrder === 'RANDOM'\n                ? getMargins(index, studySession.assessments.length)\n                : {}\n            }\n          >\n            <AssessmentSmall\n              isHideDuration={assessmentOrder === 'RANDOM'}\n              assessment={assessment}\n              hasHover={false}\n              isDragging={false}\n            ></AssessmentSmall>\n          </Box>\n        ))}\n      </div>\n      {studySession.assessments.length > 1 && (\n        <FormGroup aria-label=\"assessments\" row style={{ marginLeft: '16px' }}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={isGroupAssessments}\n                onChange={e => onChangeGrouping(e.target.checked)}\n              />\n            }\n            label=\"Bundle assessments\"\n          />\n\n          <Typography component=\"div\" style={{ marginLeft: '30px' }}>\n            <Grid\n              component=\"label\"\n              container\n              alignItems=\"center\"\n              spacing={1}\n              wrap=\"nowrap\"\n            >\n              <Grid item>Sequential</Grid>\n              <Grid item>\n                <Switch\n                  color=\"primary\"\n                  disabled={!isGroupAssessments}\n                  checked={assessmentOrder == 'RANDOM'}\n                  onChange={e => {\n                    onSetRandomized(e.target.checked)\n                  }}\n                  name=\"checkedC\"\n                />\n              </Grid>\n              <Grid item>Randomized</Grid>\n            </Grid>\n          </Typography>\n        </FormGroup>\n      )}\n    </>\n  )\n}\n\nexport default AssessmentList\n","/Users/lli/mtb/src/components/studies/scheduler/EndDate.tsx",["503"],"import {\n  createStyles,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Theme\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport {\n  EndDate as EndDateType,\n  SessionScheduleEndType\n} from '../../../types/scheduling'\nimport SmallTextBox from '../../widgets/SmallTextBox'\nimport SchedulingFormSection from './SchedulingFormSection'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n)\n\nexport interface EndDateProps {\n  endDate: EndDateType\n  onChange: Function\n}\n\nconst EndDate: React.FunctionComponent<EndDateProps> = ({\n  endDate,\n  onChange,\n}: EndDateProps) => {\n  const classes = useStyles()\n\n  const changeEndDate = (type: SessionScheduleEndType) => {\n    onChange({ ...endDate, type })\n  }\n\n  const changeEndDateDays = (days: string) => {\n    /* if (isNaN(Number.parseInt(days))) {\n      throw new Error('Number!')\n    }*/\n\n    const endDate: EndDateType = {\n      type: 'N_OCCURENCES',\n      days: Number(days),\n    }\n    onChange(endDate)\n  }\n\n  return (\n    <SchedulingFormSection label={'End after:'}>\n      <RadioGroup\n        aria-label=\"End Date\"\n        name=\"endDate\"\n        value={endDate.type}\n        onChange={e => changeEndDate(e.target.value as SessionScheduleEndType)}\n      >\n        <FormControlLabel\n          value={'END_STUDY'}\n          control={<Radio />}\n          label=\"End of study \"\n        />\n\n        <FormControlLabel\n          control={\n            <>\n              <Radio value={'N_OCCURENCES'} />{' '}\n              <SmallTextBox\n              color=\"secondary\"\n                id=\"standard-basic\"\n                style={{ marginRight: '10px' }}\n                onChange={e => changeEndDateDays(e.target.value)}\n                value={endDate.days || ''}\n                onFocus={e => changeEndDate('N_OCCURENCES')}\n              />\n            </>\n          }\n          label=\"times\"\n        />\n      </RadioGroup>\n    </SchedulingFormSection>\n  )\n}\n\nexport default EndDate\n","/Users/lli/mtb/src/components/studies/scheduler/ReminderNotification.tsx",[],"/Users/lli/mtb/src/components/studies/scheduler/RepeatFrequency.tsx",["504"],"import { createStyles, FormControlLabel, Theme } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { DWMYEnum, Reoccurance } from '../../../types/scheduling'\nimport Duration from './Duration'\nimport SchedulingFormSection from './SchedulingFormSection'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({}))\n\nexport interface RepeatFrequencyProps {\n  repeatFrequency: Reoccurance\n  onChange: Function\n}\n\nconst RepeatFrequency: React.FunctionComponent<RepeatFrequencyProps> = ({\n  repeatFrequency,\n  onChange,\n}: RepeatFrequencyProps) => {\n  const classes = useStyles()\n\n  return (\n    <SchedulingFormSection label={'Run this session every:'}>\n      <FormControlLabel\n        style={{ marginLeft: '0' }}\n        control={\n          <Duration\n            onChange={e => {\n              console.log(e)\n              onChange(e)\n            }}\n            durationString={repeatFrequency || '    '}\n            unitLabel=\"Repeat Every\"\n            numberLabel=\"frequency number\"\n            unitData={DWMYEnum}\n          ></Duration>\n        }\n        label=\"\"\n      />\n    </SchedulingFormSection>\n  )\n}\n\nexport default RepeatFrequency\n","/Users/lli/mtb/src/components/studies/scheduler/StartDate.tsx",["505"],"import {\n  createStyles,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Theme\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport {\n  HDWMEnum,\n  SessionScheduleStartType,\n  StartDate as StartDateType\n} from '../../../types/scheduling'\nimport Duration from './Duration'\nimport SchedulingFormSection from './SchedulingFormSection'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({}))\n\nexport interface StartDateProps {\n  startDate: StartDateType\n  onChange: Function\n}\n\nconst StartDate: React.FunctionComponent<StartDateProps> = ({\n  startDate,\n  onChange,\n}: StartDateProps) => {\n  const classes = useStyles()\n\n  const [startDateOffset, setStartDateOffset] = React.useState(startDate.offset)\n\n  React.useEffect(() => {\n    setStartDateOffset(startDate.offset)\n  }, [startDate.offset])\n\n  const changeStartDate = (type: SessionScheduleStartType) => {\n   if (type !== startDate.type) {\n      onChange({ ...startDate, type })\n  \n   }\n   // } else {\n    //  if (startDate.type !== 'NDAYS_DAY1') {\n      //  onChange({ ...startDate, type })\n     // }\n    //}\n  }\n\n  return (\n    <SchedulingFormSection label={'Session Starts On:'}>\n      <RadioGroup\n        aria-label=\"Start Date\"\n        name=\"startDate\"\n        value={startDate.type}\n        onChange={e =>\n          changeStartDate(e.target.value as SessionScheduleStartType)\n        }\n      >\n        <FormControlLabel value={'DAY1'} control={<Radio />} label=\"Day 1\" />\n        <FormControlLabel\n          control={\n            <>\n              <Radio value={'NDAYS_DAY1'} />{' '}\n              <Duration\n                onFocus={() => changeStartDate('NDAYS_DAY1')}\n                onChange={e => {\n                  setStartDateOffset(e.toString())\n                  onChange({\n                    ...startDate,\n                    offset: e,\n                  })\n                }}\n                durationString={startDateOffset}\n                unitLabel=\"Repeat Every\"\n                numberLabel=\"frequency number\"\n                unitData={HDWMEnum}\n              ></Duration>\n            </>\n          }\n          label=\"from Day 1\"\n        />\n      </RadioGroup>\n    </SchedulingFormSection>\n  )\n}\n\nexport default StartDate\n","/Users/lli/mtb/src/components/access-settings/AccessSettings.tsx",["506","507","508","509"],"import {\n  Box,\n  Button,\n  Container,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport MailOutlineIcon from '@material-ui/icons/MailOutline'\nimport clsx from 'clsx'\nimport React, { FunctionComponent } from 'react'\nimport { RouteComponentProps, useParams } from 'react-router-dom'\nimport { ReactComponent as Delete } from '../../assets/trash.svg'\nimport { useUserSessionDataState } from '../../helpers/AuthContext'\nimport AccessService from '../../services/access.service'\nimport StudyTopNav from '../studies/StudyTopNav'\nimport { Access, NO_ACCESS } from './AccessGrid'\nimport AccountListing from './AccountListing'\nimport MemberInvite, { NewOrgAccount } from './MemberInvite'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    //border: '1px solid black',\n    marginTop: theme.spacing(12),\n    display: 'flex',\n    padding: 0,\n  },\n  yellowButton: {\n    marginTop: theme.spacing(2),\n    backgroundColor: '#FFE500',\n    color: '#000',\n  },\n  newOrgAccount: {\n    position: 'relative',\n    marginBottom: theme.spacing(2),\n\n    padding: theme.spacing(6, 12, 8, 12),\n\n    '&$error': {\n      border: `1px solid ${theme.palette.error.main}`,\n    },\n  },\n  addNewDialogHeader: {\n    color: theme.palette.common.white,\n    backgroundColor: theme.palette.common.black,\n    textAlign: 'center',\n    padding: theme.spacing(10, 6, 4, 6),\n  },\n  addNewDialogBody: {\n    padding: theme.spacing(10, 21, 3, 21),\n    backgroundColor: theme.palette.background.default,\n  },\n  iconButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    top: theme.spacing(3),\n    padding: 0,\n    color: theme.palette.common.white,\n  },\n  buttons: {\n    margin: theme.spacing(1),\n    display: 'flex',\n    justifyContent: 'flex-end',\n\n    '& > *': {\n      '&:not(:last-child)': {\n        marginRight: theme.spacing(1),\n      },\n    },\n  },\n  error: {},\n}))\n\ntype AccessSettingsOwnProps = {\n  title?: string\n  paragraph?: string\n}\n\ntype AccessSettingsProps = AccessSettingsOwnProps & RouteComponentProps\n\nfunction CreateNewOrgAccountTemplate() {\n  const newOrgAccount: NewOrgAccount = {\n    id: new Date().getTime() + ' ' + Math.random,\n    access: NO_ACCESS,\n    isAdded: false,\n  }\n  return newOrgAccount\n}\n\nasync function createNewAccount(\n  email: string,\n  access: Access,\n  token: string,\n  currentUserOrg: string,\n) {\n  const mapAccessToRole = (access: Access): string => {\n    return 'developer'\n  }\n  try {\n    const {\n      principalId,\n      firstName,\n      lastName,\n    } = await AccessService.getAliasFromSynapseByEmail(email)\n\n    const isSuccess = await AccessService.createIndividualAccount(\n      token!,\n      email,\n      principalId,\n      firstName,\n      lastName,\n      currentUserOrg,\n      mapAccessToRole(access),\n    )\n    return [true]\n  } catch (error: any) {\n    return [false, error]\n  }\n}\nfunction filterNewAccountsByAdded(\n  accounts: NewOrgAccount[],\n  isAdded: boolean = true,\n) {\n  const result = accounts.filter(acct => acct.isAdded === isAdded)\n  return result\n}\n\nconst AccessSettings: FunctionComponent<AccessSettingsProps> = ({}) => {\n  const classes = useStyles()\n  let { id } = useParams<{ id: string }>()\n  const [isOpenInvite, setIsOpenInvite] = React.useState(false)\n  const [newOrgAccounts, setNewOrgAccounts] = React.useState<NewOrgAccount[]>([\n    CreateNewOrgAccountTemplate(),\n  ])\n\n  const sessionData = useUserSessionDataState()\n  const { token, orgMembership, roles, id:loggedInId } = sessionData \n  const [updateToggle, setUpdateToggle] = React.useState(false)\n\n \n\n  const closeInviteDialog = () => {\n    setNewOrgAccounts(_ => [CreateNewOrgAccountTemplate()])\n    setIsOpenInvite(false)\n  }\n\n  const removeNewOrgAccount = (accountId: string) => {\n    const remaining = newOrgAccounts.filter((acct, i) => acct.id !== accountId)\n    setNewOrgAccounts(_ => remaining)\n  }\n\n  const updateNewOrgAccount = (updatedNewAccount: NewOrgAccount) => {\n    setNewOrgAccounts(prev =>\n      prev.map(acct => {\n        return acct.id !== updatedNewAccount.id ? acct : updatedNewAccount\n      }),\n    )\n  }\n\n  const inviteUsers = async (newAccounts: NewOrgAccount[]) => {\n    for (const account of newAccounts.filter(a => !a.isAdded)) {\n      if (!account.email) {\n        updateNewOrgAccount({ ...account, error: 'No email provided' })\n        return\n      }\n      const [success, error] = await createNewAccount(\n        account.email,\n        account.access,\n        token!,\n        orgMembership!,\n      )\n      if (success) {\n        updateNewOrgAccount({ ...account, isAdded: true })\n      } else {\n        const errorString = error.message || error.reason\n        updateNewOrgAccount({ ...account, error: errorString })\n      }\n    }\n    setUpdateToggle(prev=>!prev)\n  }\n\n  return (\n    <>\n      <StudyTopNav studyId={id} currentSection={''}></StudyTopNav>\n      <Container maxWidth=\"md\" className={classes.root}>\n        <Paper elevation={2} style={{ width: '100%' }}>\n          <AccountListing sessionData={sessionData}  updateToggle={updateToggle}>\n            <Button\n              onClick={() => setIsOpenInvite(true)}\n              variant=\"contained\"\n              className={classes.yellowButton}\n            >\n              Invite a Member\n            </Button>\n          </AccountListing>\n        </Paper>\n      </Container>\n     <Dialog\n          open={isOpenInvite}\n          maxWidth=\"md\"\n          fullWidth\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle className={classes.addNewDialogHeader} disableTypography>\n            <MailOutlineIcon style={{ width: '25px' }}></MailOutlineIcon>\n            <Typography variant=\"subtitle2\" style={{ fontSize: '25px' }}>\n              Invite Team Members\n            </Typography>\n            <IconButton\n              aria-label=\"close\"\n              className={classes.iconButton}\n              onClick={() => {\n                closeInviteDialog()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent className={classes.addNewDialogBody}>\n            <pre>\n              Enter 'sErr' in email address to simulate synapse error. Enter\n              'bErr' in email address to simulate bridge error.\n            </pre>\n            {filterNewAccountsByAdded(newOrgAccounts).length > 0 && (\n              <>\n                <Paper\n                  elevation={2}\n                  style={{ margin: '16px 0' }}\n                  key={'success'}\n                  className={clsx(classes.newOrgAccount)}\n                >\n                  <strong>Added Succesfully</strong>\n                  <br /> <br />\n                  {filterNewAccountsByAdded(newOrgAccounts)\n                    .map(acct => acct.email)\n                    .join(', ')}\n                </Paper>\n              </>\n            )}\n\n            {filterNewAccountsByAdded(newOrgAccounts, false).map(\n              (newOrgAccount, index) => (\n                <Paper\n                  elevation={2}\n                  className={clsx(\n                    classes.newOrgAccount,\n                    newOrgAccount.error && classes.error,\n                  )}\n                  key={index + new Date().getTime()}\n                >\n                  {newOrgAccounts.length > 1 && (\n                    <IconButton\n                      aria-label=\"delete\"\n                      className={classes.iconButton}\n                      onClick={() => removeNewOrgAccount(newOrgAccount.id)}\n                    >\n                      <Delete></Delete>\n                    </IconButton>\n                  )}\n                  <MemberInvite\n                    newOrgAccount={newOrgAccount}\n                    index={index}\n                    onUpdate={(newOrgAccount: NewOrgAccount) =>\n                      updateNewOrgAccount(newOrgAccount)\n                    }\n                  />\n                </Paper>\n              ),\n            )}\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() =>\n                setNewOrgAccounts(prev => [\n                  ...prev,\n                  CreateNewOrgAccountTemplate(),\n                ])\n              }\n            >\n              + Add Another Member\n            </Button>\n            <Box className={classes.buttons}>\n              <Button\n                onClick={() => closeInviteDialog()}\n                color=\"secondary\"\n                variant=\"outlined\"\n                style={{\n                  display:\n                    filterNewAccountsByAdded(newOrgAccounts, false).length === 0\n                      ? 'none'\n                      : 'inherit',\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => inviteUsers(newOrgAccounts)}\n                color=\"primary\"\n                variant=\"contained\"\n                style={{\n                  display:\n                    filterNewAccountsByAdded(newOrgAccounts, false).length === 0\n                      ? 'none'\n                      : 'inherit',\n                }}\n              >\n                <MailOutlineIcon />\n                &nbsp;Invite To Study\n              </Button>\n              <Button\n                onClick={() => closeInviteDialog()}\n                color=\"primary\"\n                variant=\"contained\"\n                style={{\n                  display:\n                    filterNewAccountsByAdded(newOrgAccounts, false).length === 0\n                      ? 'inherit'\n                      : 'none',\n                }}\n              >\n                Done\n              </Button>\n            </Box>\n          </DialogContent>\n        </Dialog>\n   \n    </>\n  )\n}\n\nexport default AccessSettings\n","/Users/lli/mtb/src/components/access-settings/AccessGrid.tsx",["510"],"import { Box, makeStyles, Radio } from '@material-ui/core'\nimport clsx from 'clsx'\nimport React, { FunctionComponent } from 'react'\n\nconst useStyles = makeStyles(theme => ({\n  cell: {\n    borderBottom: '1px solid black',\n    \n    padding: '10px'\n  },\n  data: {\n    width: '100px',\n    textAlign: 'center'\n    \n  },\n  dot: {\n    width: '14px',\n    height: '14px',\n    borderRadius: '50%',\n    margin: 'auto',\n    backgroundColor: 'black'\n  }\n}))\n\nexport const AccessRestriction = ['NO_ACCESS', 'VIEWER', 'EDITOR']\n\ntype AccessProps = {\n  access: Access\n  onUpdate?: Function\n  isEdit?: boolean\n}\n\nexport type AccessLabel = {\n  [key: string]: string\n}\n\nexport type Access = {\n  STUDY_BUILDER: typeof AccessRestriction[number]\n  PARTICIPANT_MANAGER: typeof AccessRestriction[number]\n  ADHERENCE_DATA: typeof AccessRestriction[number]\n}\n\nconst roles: AccessLabel[] = [\n  { STUDY_BUILDER: 'STUDY BUILDER' },\n  { PARTICIPANT_MANAGER: 'PARTICIPANT MANAGER' },\n  { ADHERENCE_DATA: 'ADHERENCE DATA' },\n]\n\n\nconst Access: FunctionComponent<AccessProps> = ({\n  access,\n  onUpdate,\n  isEdit,\n}: AccessProps) => {\n  const classes = useStyles()\n\n  //const [access, setAccess] = React.useState<Access>(_access)\n\n  const isEqualToCurrentValue = (restriction: string, role_key: AccessLabel): boolean =>{\n    const key = Object.keys(role_key)[0] as keyof(Access)\n    return access[key] === restriction\n  }\n\n  const updateAccess = (restriction: string, accessObject: AccessLabel) => {\n    if(!onUpdate) {\n      return\n    }\n    const accessKey = Object.keys(accessObject)[0]\n    onUpdate({ ...access, [accessKey]: restriction })\n  }\n\n  return (\n    <Box>\n      <h3>Access Type</h3>\n      <table cellPadding=\"0\" cellSpacing=\"0\" width=\"100%\">\n        <tr>\n          <th></th>\n          <th className={classes.data}>No Access</th>\n          <th className={classes.data}>Viewer</th>\n          <th className={classes.data}>Editor</th>\n        </tr>\n        {roles.map((role_key: AccessLabel, index: number) => (\n          <tr>\n            <td className={classes.cell}>{Object.values(role_key)}</td>\n\n            {AccessRestriction.map(restriction => (\n              <td className={clsx(classes.cell, classes.data)}>\n                {! isEdit && isEqualToCurrentValue(restriction,role_key) ? <div className={classes.dot}/> :<>&nbsp;</>\n                }\n                {isEdit && <Radio\n                  checked={isEqualToCurrentValue(restriction,role_key)}\n                  value={restriction}\n                  onChange={e => {\n       \n                    updateAccess(e.target.value, role_key)\n                  }}\n                  radioGroup={'group_' + Object.keys(role_key)}\n                ></Radio>}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </table>\n    </Box>\n  )\n}\n\nexport default Access\n","/Users/lli/mtb/src/components/studies/LiveIcon.tsx",["511"],"import { makeStyles } from '@material-ui/core'\nimport LiveIconImage from '../../assets/live_study_icon.svg'\n\nconst useStyles = makeStyles(theme => ({\n  liveContainer: {\n    width: '68px',\n    height: '24px',\n    borderRadius: '25px',\n    backgroundColor: '#51A3A3',\n    outline: 'none',\n    display: 'flex',\n    color: 'white',\n    fontWeight: 'bold',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    padding: theme.spacing(0, 0.5),\n    fontFamily: \"Lato\"\n  },\n  icon: {\n    width: '20px',\n    height: '20px',\n  },\n}))\n\nconst LiveIcon: React.FC<{}> = props => {\n  const classes = useStyles()\n  return (\n    <div className={classes.liveContainer}>\n      <img src={LiveIconImage} className={classes.icon}></img>\n      <div>Live</div>\n    </div>\n  )\n}\n\nexport default LiveIcon\n","/Users/lli/mtb/src/components/access-settings/AccountListing.tsx",["512","513","514","515","516"],"import { Box, Button, makeStyles, Theme } from '@material-ui/core'\nimport React, { FunctionComponent, ReactNode } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { ReactComponent as Delete } from '../../assets/trash.svg'\nimport { useAsync } from '../../helpers/AsyncHook'\nimport AccessService from '../../services/access.service'\nimport { globals } from '../../style/theme'\nimport { OrgUser, UserSessionData } from '../../types/types'\nimport ConfirmationDialog from '../widgets/ConfirmationDialog'\nimport Loader from '../widgets/Loader'\nimport SideBarListItem from '../widgets/SideBarListItem'\nimport AccessGrid, {\n  Access,\n  getAccessFromRoles,\n  getRolesFromAccess\n} from './AccessGrid'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    width: '100%',\n  },\n  listing: {\n    width: theme.spacing(39),\n    // marginRight: theme.spacing(15),\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n    padding: theme.spacing(4, 0, 3, 3.5),\n  },\n  list: { ...globals.listReset, marginLeft: -theme.spacing(3.5) },\n  buttons: {\n    display: 'flex',\n    marginTop: theme.spacing(6),\n    justifyContent: 'space-between',\n    bottom: theme.spacing(4),\n  },\n}))\n\ntype AccountListingProps = {\n  children?: ReactNode\n\n  updateToggle: boolean\n  sessionData: UserSessionData\n}\n\nfunction getNameDisplay({\n  firstName,\n  lastName,\n\n  synapseUserId,\n}: OrgUser): string {\n  const name =\n    firstName || lastName ? [firstName, lastName].join(' ') : synapseUserId\n  return name\n}\n\nconst NameDisplay: FunctionComponent<any> = ({\n  member,\n  roles,\n  index,\n}): JSX.Element => {\n  let name = getNameDisplay(member)\n\n  let admin = <></>\n\n  if (index === 0) {\n    name = name + ' (You)'\n    admin = roles.includes('admin') ? <div>Study Admin</div> : <></>\n  }\n\n  const firstLine = (\n    <Box display=\"flex\" justifyContent=\"space-between\">\n      <div>\n        <strong>{name}</strong>\n      </div>\n      {admin}\n    </Box>\n  )\n\n  return (\n    <Box style={{ textTransform: 'none' }}>\n      {firstLine}\n      <span>{member.email}</span>\n    </Box>\n  )\n}\n\nconst AccountListing: FunctionComponent<AccountListingProps> = ({\n  updateToggle,\n  sessionData,\n  children,\n}: AccountListingProps) => {\n  const classes = useStyles()\n  const { token, roles, id, orgMembership } = sessionData\n\n  const handleError = useErrorHandler()\n\n  const [currentMemberAccess, setCurrentMemberAccess] = React.useState<\n    { access: Access; member: OrgUser } | undefined\n  >()\n  const [isAccessLoading, setIsAccessLoading] = React.useState(true)\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = React.useState(false)\n\n  const { data: members, status, error, run, setData } = useAsync<any>({\n    status: 'PENDING',\n    data: [],\n  })\n\n  async function getMembers(orgMembership: string, token: string) {\n    const members = await AccessService.getAccountsForOrg(\n      token!,\n      orgMembership!,\n    )\n    const meIndex = members.findIndex(m => m.id === id)\n    const result = [\n      members[meIndex],\n      ...members.slice(0, meIndex),\n      ...members.slice(meIndex + 1, members.length),\n    ]\n    return result\n  }\n\n  React.useEffect(() => {\n\n\n    return run(\n      (async function (orgMembership, token) {\n        console.log(token, orgMembership)\n        const result = getMembers(orgMembership!, token!)\n\n        return result\n      })(orgMembership, token),\n    )\n  }, [run, orgMembership!, token!, updateToggle])\n\n  const deleteExistingAccount = async (member: OrgUser) => {\n    await AccessService.deleteIndividualAccount(token!, member.id)\n    const result = await getMembers(orgMembership!, token!)\n    setData(result)\n\n  }\n\n  const updateRolesForExistingAccount = async ({\n    member,\n    access,\n  }: {\n    member: OrgUser\n    access: Access\n  }) => {\n    const roles = getRolesFromAccess(access)\n    const user = await AccessService.updateIndividualAccountRoles(\n      token!,\n      member.id,\n      roles,\n    )\n    const result = await getMembers(orgMembership!, token!)\n    setData(result)\n\n  }\n\n  const updateAccess = async (memberId: string) => {\n    setIsAccessLoading(true)\n    const member = await AccessService.getIndividualAccount(token!, memberId)\n    console.log(member.roles.join(','))\n    const access = getAccessFromRoles(member.roles)\n\n    setCurrentMemberAccess({ access, member })\n    setIsAccessLoading(false)\n  }\n\n  React.useEffect(() => {\n    ;(async function (id) {\n      if (!id) {\n        return\n      }\n      updateAccess(id)\n    })(members ? members[0]?.id : undefined)\n  }, [members])\n\n  if (status === 'REJECTED') {\n    handleError(error!)\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.listing}>\n        <h3>Team Members</h3>\n        {status === 'PENDING' && <Loader reqStatusLoading={true}></Loader>}{' '}\n        <ul\n          className={classes.list}\n          style={{\n            maxHeight: '400px',\n            overflow: 'scroll',\n            marginBottom: '16px',\n          }}\n        >\n          {members &&\n            members.map((member: any, index: number) => (\n              <SideBarListItem\n                key={member.id}\n                variant={'dark'}\n                isOpen={true}\n                isActive={\n                  member.id ===\n                  /*currentMemberId*/ currentMemberAccess?.member.id\n                }\n                onClick={() => updateAccess(member.id)}\n              >\n                <div\n                  style={{\n                    paddingLeft: '8px',\n                    textAlign: 'left',\n                    width: '100%',\n                  }}\n                >\n                  <NameDisplay\n                    member={member}\n                    roles={roles}\n                    index={index}\n                  ></NameDisplay>\n                </div>\n              </SideBarListItem>\n            ))}\n        </ul>\n        <Box textAlign=\"center\" pr={3}>\n          {children}\n        </Box>\n      </Box>\n      <Loader\n        reqStatusLoading={!currentMemberAccess?.member || isAccessLoading}\n        style={{ width: 'auto', margin: '0 auto' }}\n      >\n        {currentMemberAccess && (\n          <Box pl={15} position=\"relative\">\n            <h3 style={{ marginBottom: '80px', marginTop: '100px' }}>\n              {' '}\n              <NameDisplay\n                member={currentMemberAccess!.member}\n                roles={roles}\n                index={-1}\n              ></NameDisplay>\n            </h3>\n            <AccessGrid\n              access={currentMemberAccess!.access!}\n              onUpdate={(_access: Access) =>\n                setCurrentMemberAccess({\n                  member: currentMemberAccess!.member,\n                  access: _access,\n                })\n              }\n              isEdit={true}\n            ></AccessGrid>\n\n            {roles.includes('admin') && (\n              <Box className={classes.buttons}>\n                <Button\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    setIsConfirmDeleteOpen(true)\n                  }}\n                  startIcon={<Delete />}\n                >\n                  Remove from study\n                </Button>\n                <Button\n                  aria-label=\"save changes\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={() =>\n                    updateRolesForExistingAccount(currentMemberAccess!)\n                  }\n                >\n                  Save changes\n                </Button>\n              </Box>\n            )}\n\n            <ConfirmationDialog\n              isOpen={isConfirmDeleteOpen}\n              title={'Delete Study'}\n              type={'DELETE'}\n              onCancel={() => setIsConfirmDeleteOpen(false)}\n              onConfirm={() => {\n                const member = { ...currentMemberAccess!.member }\n                // setCurrentMemberId(members[0].id)\n                deleteExistingAccount(member)\n\n                setIsConfirmDeleteOpen(false)\n              }}\n            >\n              <div>\n                <strong>\n                  Are you sure you would like to permanently delete{' '}\n                  {getNameDisplay(currentMemberAccess!.member)}\n                </strong>\n              </div>\n            </ConfirmationDialog>\n          </Box>\n        )}\n      </Loader>\n    </Box>\n  )\n}\n\nexport default AccountListing\n","/Users/lli/mtb/src/components/access-settings/MemberInvite.tsx",[],"/Users/lli/mtb/src/components/widgets/SideBarListItem.tsx",[],"/Users/lli/mtb/src/components/widgets/ErrorDisplay.tsx",[],"/Users/lli/mtb/src/components/widgets/TabPanel.tsx",["517","518","519"],"/Users/lli/mtb/src/components/widgets/CollapsibleLayout.tsx",[],{"ruleId":"520","replacedBy":"521"},{"ruleId":"522","replacedBy":"523"},{"ruleId":"524","severity":1,"message":"525","line":98,"column":6,"nodeType":"526","endLine":98,"endColumn":13,"suggestions":"527"},{"ruleId":"524","severity":1,"message":"528","line":101,"column":6,"nodeType":"526","endLine":101,"endColumn":25,"suggestions":"529"},{"ruleId":"520","replacedBy":"521"},{"ruleId":"522","replacedBy":"523"},{"ruleId":"530","severity":1,"message":"531","line":15,"column":3,"nodeType":"532","messageId":"533","endLine":15,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":1,"column":1,"nodeType":"536","endLine":146,"endColumn":2},{"ruleId":"534","severity":1,"message":"537","line":10,"column":1,"nodeType":"536","endLine":61,"endColumn":2},{"ruleId":"538","severity":1,"message":"539","line":3,"column":8,"nodeType":"540","messageId":"541","endLine":3,"endColumn":20},{"ruleId":"534","severity":1,"message":"537","line":11,"column":1,"nodeType":"536","endLine":54,"endColumn":2},{"ruleId":"538","severity":1,"message":"542","line":20,"column":19,"nodeType":"540","messageId":"541","endLine":20,"endColumn":31},{"ruleId":"538","severity":1,"message":"543","line":131,"column":9,"nodeType":"540","messageId":"541","endLine":131,"endColumn":16},{"ruleId":"538","severity":1,"message":"543","line":153,"column":9,"nodeType":"540","messageId":"541","endLine":153,"endColumn":16},{"ruleId":"544","severity":1,"message":"545","line":201,"column":11,"nodeType":"546","endLine":201,"endColumn":78},{"ruleId":"524","severity":1,"message":"547","line":265,"column":6,"nodeType":"526","endLine":265,"endColumn":8,"suggestions":"548"},{"ruleId":"538","severity":1,"message":"549","line":6,"column":7,"nodeType":"540","messageId":"541","endLine":6,"endColumn":16},{"ruleId":"538","severity":1,"message":"550","line":39,"column":16,"nodeType":"540","messageId":"541","endLine":39,"endColumn":31},{"ruleId":"534","severity":1,"message":"535","line":5,"column":1,"nodeType":"536","endLine":37,"endColumn":2},{"ruleId":"544","severity":1,"message":"545","line":133,"column":13,"nodeType":"546","endLine":133,"endColumn":81},{"ruleId":"538","severity":1,"message":"551","line":225,"column":11,"nodeType":"540","messageId":"541","endLine":225,"endColumn":18},{"ruleId":"538","severity":1,"message":"552","line":11,"column":3,"nodeType":"540","messageId":"541","endLine":11,"endColumn":11},{"ruleId":"538","severity":1,"message":"553","line":14,"column":8,"nodeType":"540","messageId":"541","endLine":14,"endColumn":13},{"ruleId":"538","severity":1,"message":"554","line":7,"column":10,"nodeType":"540","messageId":"541","endLine":7,"endColumn":22},{"ruleId":"538","severity":1,"message":"555","line":7,"column":34,"nodeType":"540","messageId":"541","endLine":7,"endColumn":39},{"ruleId":"538","severity":1,"message":"556","line":119,"column":9,"nodeType":"540","messageId":"541","endLine":119,"endColumn":14},{"ruleId":"538","severity":1,"message":"557","line":71,"column":10,"nodeType":"540","messageId":"541","endLine":71,"endColumn":21},{"ruleId":"538","severity":1,"message":"558","line":71,"column":23,"nodeType":"540","messageId":"541","endLine":71,"endColumn":37},{"ruleId":"538","severity":1,"message":"556","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":14},{"ruleId":"538","severity":1,"message":"559","line":56,"column":37,"nodeType":"540","messageId":"541","endLine":56,"endColumn":44},{"ruleId":"538","severity":1,"message":"560","line":68,"column":11,"nodeType":"540","messageId":"541","endLine":68,"endColumn":15},{"ruleId":"530","severity":1,"message":"531","line":71,"column":11,"nodeType":"532","messageId":"533","endLine":71,"endColumn":40},{"ruleId":"538","severity":1,"message":"559","line":38,"column":37,"nodeType":"540","messageId":"541","endLine":38,"endColumn":44},{"ruleId":"524","severity":1,"message":"561","line":49,"column":6,"nodeType":"526","endLine":49,"endColumn":11,"suggestions":"562"},{"ruleId":"538","severity":1,"message":"559","line":100,"column":37,"nodeType":"540","messageId":"541","endLine":100,"endColumn":44},{"ruleId":"524","severity":1,"message":"561","line":125,"column":6,"nodeType":"526","endLine":125,"endColumn":20,"suggestions":"563"},{"ruleId":"524","severity":1,"message":"564","line":28,"column":6,"nodeType":"526","endLine":28,"endColumn":22,"suggestions":"565"},{"ruleId":"538","severity":1,"message":"566","line":26,"column":26,"nodeType":"540","messageId":"541","endLine":26,"endColumn":27},{"ruleId":"544","severity":1,"message":"545","line":111,"column":15,"nodeType":"546","endLine":111,"endColumn":44},{"ruleId":"538","severity":1,"message":"567","line":3,"column":28,"nodeType":"540","messageId":"541","endLine":3,"endColumn":36},{"ruleId":"538","severity":1,"message":"568","line":4,"column":8,"nodeType":"540","messageId":"541","endLine":4,"endColumn":16},{"ruleId":"544","severity":1,"message":"545","line":142,"column":15,"nodeType":"546","endLine":142,"endColumn":72},{"ruleId":"538","severity":1,"message":"543","line":23,"column":9,"nodeType":"540","messageId":"541","endLine":23,"endColumn":16},{"ruleId":"538","severity":1,"message":"569","line":32,"column":13,"nodeType":"540","messageId":"541","endLine":32,"endColumn":15},{"ruleId":"538","severity":1,"message":"570","line":34,"column":11,"nodeType":"540","messageId":"541","endLine":34,"endColumn":13},{"ruleId":null,"fatal":true,"severity":2,"message":"571","line":83,"column":0},{"ruleId":"538","severity":1,"message":"572","line":102,"column":9,"nodeType":"540","messageId":"541","endLine":102,"endColumn":20},{"ruleId":"538","severity":1,"message":"573","line":109,"column":10,"nodeType":"540","messageId":"541","endLine":109,"endColumn":23},{"ruleId":"538","severity":1,"message":"574","line":109,"column":25,"nodeType":"540","messageId":"541","endLine":109,"endColumn":41},{"ruleId":"538","severity":1,"message":"575","line":112,"column":10,"nodeType":"540","messageId":"541","endLine":112,"endColumn":14},{"ruleId":"538","severity":1,"message":"576","line":112,"column":16,"nodeType":"540","messageId":"541","endLine":112,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":162,"column":17,"nodeType":"546","endLine":162,"endColumn":80},{"ruleId":"538","severity":1,"message":"572","line":25,"column":9,"nodeType":"540","messageId":"541","endLine":25,"endColumn":20},{"ruleId":"538","severity":1,"message":"543","line":27,"column":9,"nodeType":"540","messageId":"541","endLine":27,"endColumn":16},{"ruleId":"538","severity":1,"message":"577","line":30,"column":10,"nodeType":"540","messageId":"541","endLine":30,"endColumn":20},{"ruleId":"538","severity":1,"message":"578","line":30,"column":22,"nodeType":"540","messageId":"541","endLine":30,"endColumn":35},{"ruleId":"524","severity":1,"message":"579","line":94,"column":6,"nodeType":"526","endLine":94,"endColumn":24,"suggestions":"580"},{"ruleId":"538","severity":1,"message":"581","line":21,"column":8,"nodeType":"540","messageId":"541","endLine":21,"endColumn":18},{"ruleId":"538","severity":1,"message":"582","line":22,"column":8,"nodeType":"540","messageId":"541","endLine":22,"endColumn":15},{"ruleId":"538","severity":1,"message":"583","line":23,"column":8,"nodeType":"540","messageId":"541","endLine":23,"endColumn":24},{"ruleId":"538","severity":1,"message":"584","line":24,"column":8,"nodeType":"540","messageId":"541","endLine":24,"endColumn":14},{"ruleId":"538","severity":1,"message":"585","line":25,"column":8,"nodeType":"540","messageId":"541","endLine":25,"endColumn":18},{"ruleId":"538","severity":1,"message":"586","line":26,"column":8,"nodeType":"540","messageId":"541","endLine":26,"endColumn":22},{"ruleId":"538","severity":1,"message":"543","line":14,"column":9,"nodeType":"540","messageId":"541","endLine":14,"endColumn":16},{"ruleId":"538","severity":1,"message":"567","line":1,"column":10,"nodeType":"540","messageId":"541","endLine":1,"endColumn":18},{"ruleId":"538","severity":1,"message":"587","line":5,"column":16,"nodeType":"540","messageId":"541","endLine":5,"endColumn":21},{"ruleId":"538","severity":1,"message":"588","line":5,"column":23,"nodeType":"540","messageId":"541","endLine":5,"endColumn":30},{"ruleId":"544","severity":1,"message":"545","line":82,"column":9,"nodeType":"546","endLine":82,"endColumn":32},{"ruleId":"538","severity":1,"message":"543","line":22,"column":9,"nodeType":"540","messageId":"541","endLine":22,"endColumn":16},{"ruleId":"538","severity":1,"message":"559","line":100,"column":37,"nodeType":"540","messageId":"541","endLine":100,"endColumn":44},{"ruleId":"524","severity":1,"message":"561","line":111,"column":6,"nodeType":"526","endLine":111,"endColumn":11,"suggestions":"589"},{"ruleId":"524","severity":1,"message":"590","line":46,"column":6,"nodeType":"526","endLine":46,"endColumn":23,"suggestions":"591"},{"ruleId":"538","severity":1,"message":"543","line":29,"column":9,"nodeType":"540","messageId":"541","endLine":29,"endColumn":16},{"ruleId":"538","severity":1,"message":"543","line":29,"column":9,"nodeType":"540","messageId":"541","endLine":29,"endColumn":16},{"ruleId":"530","severity":1,"message":"531","line":47,"column":9,"nodeType":"532","messageId":"533","endLine":47,"endColumn":43},{"ruleId":"538","severity":1,"message":"592","line":50,"column":13,"nodeType":"540","messageId":"541","endLine":50,"endColumn":20},{"ruleId":"593","severity":1,"message":"594","line":9,"column":67,"nodeType":"595","messageId":"596","endLine":9,"endColumn":88},{"ruleId":"538","severity":1,"message":"543","line":10,"column":9,"nodeType":"540","messageId":"541","endLine":10,"endColumn":16},{"ruleId":"538","severity":1,"message":"597","line":12,"column":8,"nodeType":"540","messageId":"541","endLine":12,"endColumn":13},{"ruleId":"538","severity":1,"message":"598","line":17,"column":8,"nodeType":"540","messageId":"541","endLine":17,"endColumn":14},{"ruleId":"538","severity":1,"message":"599","line":18,"column":8,"nodeType":"540","messageId":"541","endLine":18,"endColumn":18},{"ruleId":"524","severity":1,"message":"600","line":107,"column":6,"nodeType":"526","endLine":107,"endColumn":36,"suggestions":"601"},{"ruleId":"538","severity":1,"message":"602","line":35,"column":9,"nodeType":"540","messageId":"541","endLine":35,"endColumn":31},{"ruleId":"538","severity":1,"message":"603","line":3,"column":8,"nodeType":"540","messageId":"541","endLine":3,"endColumn":12},{"ruleId":"538","severity":1,"message":"543","line":47,"column":9,"nodeType":"540","messageId":"541","endLine":47,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":155,"column":44,"nodeType":"606","messageId":"596","endLine":155,"endColumn":46},{"ruleId":"538","severity":1,"message":"543","line":38,"column":9,"nodeType":"540","messageId":"541","endLine":38,"endColumn":16},{"ruleId":"538","severity":1,"message":"543","line":19,"column":9,"nodeType":"540","messageId":"541","endLine":19,"endColumn":16},{"ruleId":"538","severity":1,"message":"543","line":29,"column":9,"nodeType":"540","messageId":"541","endLine":29,"endColumn":16},{"ruleId":"538","severity":1,"message":"607","line":111,"column":11,"nodeType":"540","messageId":"541","endLine":111,"endColumn":20},{"ruleId":"593","severity":1,"message":"594","line":133,"column":65,"nodeType":"595","messageId":"596","endLine":133,"endColumn":67},{"ruleId":"538","severity":1,"message":"608","line":142,"column":33,"nodeType":"540","messageId":"541","endLine":142,"endColumn":38},{"ruleId":"538","severity":1,"message":"609","line":142,"column":43,"nodeType":"540","messageId":"541","endLine":142,"endColumn":53},{"ruleId":"610","severity":1,"message":"611","line":50,"column":7,"nodeType":"540","messageId":"612","endLine":50,"endColumn":45},{"ruleId":"544","severity":1,"message":"545","line":30,"column":7,"nodeType":"546","endLine":30,"endColumn":57},{"ruleId":"524","severity":1,"message":"613","line":134,"column":6,"nodeType":"526","endLine":134,"endColumn":49,"suggestions":"614"},{"ruleId":"524","severity":1,"message":"615","line":134,"column":12,"nodeType":"616","endLine":134,"endColumn":26},{"ruleId":"524","severity":1,"message":"615","line":134,"column":28,"nodeType":"616","endLine":134,"endColumn":34},{"ruleId":"538","severity":1,"message":"617","line":151,"column":11,"nodeType":"540","messageId":"541","endLine":151,"endColumn":15},{"ruleId":"524","severity":1,"message":"618","line":178,"column":6,"nodeType":"526","endLine":178,"endColumn":15,"suggestions":"619"},{"ruleId":"538","severity":1,"message":"620","line":1,"column":36,"nodeType":"540","messageId":"541","endLine":1,"endColumn":44},{"ruleId":"538","severity":1,"message":"599","line":3,"column":15,"nodeType":"540","messageId":"541","endLine":3,"endColumn":25},{"ruleId":"538","severity":1,"message":"603","line":5,"column":8,"nodeType":"540","messageId":"541","endLine":5,"endColumn":12},"no-native-reassign",["621"],"no-negated-in-lhs",["622"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sessionUpdateFn'. Either include it or remove the dependency array.","ArrayExpression",["623"],"React Hook useEffect has missing dependencies: 'sessionData' and 'sessionUpdateFn'. Either include them or remove the dependency array.",["624"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","@typescript-eslint/no-unused-vars","'StudyBuilder' is defined but never used.","Identifier","unusedVar","'NavLinkProps' is defined but never used.","'classes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["625"],"'useStyles' is assigned a value but never used.","'getAllSchedules' is defined but never used.","'allKeys' is assigned a value but never used.","'Snackbar' is defined but never used.","'Alert' is defined but never used.","'createStyles' is defined but never used.","'Theme' is defined but never used.","'theme' is assigned a value but never used.","'nextSection' is assigned a value but never used.","'setNextSection' is assigned a value but never used.","'setData' is assigned a value but never used.","'tags' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["626"],["627"],"React Hook React.useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["628"],"'T' is defined but never used.","'Response' is defined but never used.","'SomeIcon' is defined but never used.","'id' is assigned a value but never used.","'go' is assigned a value but never used.","Parsing error: Merge conflict marker encountered.","'handleError' is assigned a value but never used.","'uploadedFiles' is assigned a value but never used.","'setUploadedFiles' is assigned a value but never used.","'logo' is assigned a value but never used.","'setLogo' is assigned a value but never used.","'activeStep' is assigned a value but never used.","'setActiveStep' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'onSave'. Either include it or remove the dependency array. If 'onSave' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["629"],"'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'MOCKS' is defined but never used.","'setItem' is defined but never used.",["630"],"React Hook useEffect has a missing dependency: 'sessions'. Either include it or remove the dependency array. If 'setSelectedSessionId' needs the current value of 'sessions', you can also switch to useReducer instead of useState and read 'sessions' in the reducer.",["631"],"'hasTime' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Check' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","React Hook React.useEffect has a missing dependency: 'defaultSchedule'. Either include it or remove the dependency array.",["632"],"'getAssessmentDurations' is assigned a value but never used.","'clsx' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'isSuccess' is assigned a value but never used.","'roles' is assigned a value but never used.","'loggedInId' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Access' is already defined.","redeclared","React Hook React.useEffect has missing dependencies: 'getMembers', 'orgMembership', and 'token'. Either include them or remove the dependency array.",["633"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","TSNonNullExpression","'user' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'updateAccess'. Either include it or remove the dependency array.",["634"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"desc":"645","fix":"646"},{"desc":"647","fix":"648"},{"desc":"641","fix":"649"},{"desc":"650","fix":"651"},{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},"Update the dependencies array to be: [sessionUpdateFn, token]",{"range":"658","text":"659"},"Update the dependencies array to be: [sessionData, sessionData.token, sessionUpdateFn]",{"range":"660","text":"661"},"Update the dependencies array to be: [token]",{"range":"662","text":"663"},"Update the dependencies array to be: [run, token]",{"range":"664","text":"665"},"Update the dependencies array to be: [studyId, run, token]",{"range":"666","text":"667"},"Update the dependencies array to be: [getData, id, run, token]",{"range":"668","text":"669"},"Update the dependencies array to be: [isInitialInfoSet, onSave]",{"range":"670","text":"671"},{"range":"672","text":"665"},"Update the dependencies array to be: [sessions, sessions.length]",{"range":"673","text":"674"},"Update the dependencies array to be: [defaultSchedule, studySession.sessionSchedule]",{"range":"675","text":"676"},"Update the dependencies array to be: [getMembers, orgMembership, run, token, updateToggle]",{"range":"677","text":"678"},"Update the dependencies array to be: [members, updateAccess]",{"range":"679","text":"680"},[2961,2968],"[sessionUpdateFn, token]",[3043,3062],"[sessionData, sessionData.token, sessionUpdateFn]",[6792,6794],"[token]",[1495,1500],"[run, token]",[3476,3490],"[studyId, run, token]",[800,816],"[getData, id, run, token]",[2565,2583],"[isInitialInfoSet, onSave]",[2962,2967],[1157,1174],"[sessions, sessions.length]",[2787,2817],"[defaultSchedule, studySession.sessionSchedule]",[3434,3477],"[getMembers, orgMembership, run, token, updateToggle]",[4573,4582],"[members, updateAccess]"]